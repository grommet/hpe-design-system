export const siteContents = [
  {
    name: '_app',
    parent: 'pages',
    path: '/Users/mglissmann/Code/aries/aries-site/src/pages/_app.js',
    content:
      "     const slugToText = str => str.split('-').join(' '); /* _app.js allows for customizing Next.js's default <App> component  * Details: https://nextjs.org/docs/advanced-features/custom-app  *  * The `Component` prop is the active `page`, so whenever you  * navigate between routes, `Component` will change to the new `page`.  */ function App({ Component, pageProps, router }) {   const route = router.route.split('/');   // necessary to ensure SkipLinks can receive first tab focus   // after a route change   useEffect(() => {     const handleRouteChange = () => {       const skipLinks = document.querySelector('#skip-links');       skipLinks.focus();     };     router.events.on('routeChangeComplete', handleRouteChange);     // If the component is unmounted, unsubscribe     // from the event with the `off` method:     return () => {       router.events.off('routeChangeComplete', handleRouteChange);     };   }, [router.events]);   // final array item from the route is the title of page we are on   const title =     route[route.length - 1].length && slugToText(route[route.length - 1]);   // second to last array item (if present) is the topic   const topic =     route[route.length - 2] &&     route[route.length - 2].length &&     slugToText(route[route.length - 2]);   // for mdx pages, we need to wrap the content in Layout and MDX provider   if (Component.isMDXComponent) {     return (       <ThemeMode>         <Layout title={title} topic={topic}>           <MDXProvider components={components}>             <Component {...pageProps} />           </MDXProvider>         </Layout>       </ThemeMode>     );   }   // for all other pages, we build the page with Layout in the .js file   return (     <ThemeMode>       <Component {...pageProps} />     </ThemeMode>   ); } App.propTypes = {   Component: PropTypes.func,   pageProps: PropTypes.shape({}),   router: PropTypes.shape({     route: PropTypes.string.isRequired,     events: PropTypes.shape({       on: PropTypes.func,       off: PropTypes.func,     }),   }).isRequired, }; export default App; ",
  },
  {
    name: '_document',
    parent: 'pages',
    path: '/Users/mglissmann/Code/aries/aries-site/src/pages/_document.js',
    content:
      '  // This custom set-up is necessary to inject the server side // rendered styles into the <head> // More info here: https://github.com/zeit/next.js/tree/master/examples/with-styled-components export default class MyDocument extends Document {   static async getInitialProps(ctx) {     const sheet = new ServerStyleSheet();     const originalRenderPage = ctx.renderPage;     try {       ctx.renderPage = () =>         originalRenderPage({           enhanceApp: App => props => sheet.collectStyles(<App {...props} />),         });       const initialProps = await Document.getInitialProps(ctx);       return {         ...initialProps,         styles: (           <>             {initialProps.styles}             {sheet.getStyleElement()}           </>         ),       };     } finally {       sheet.seal();     }   }   render() {     return (       <Html lang="en">         <Head />         <body>           <div id="header" className="header" />           <Main />           <div id="footer" className="footer" />           <script src="https://h50007.www5.hpe.com/hfws-static/js/framework/jquery/v-3-6-0/jquery.js" />           <script src="https://h50007.www5.hpe.com/hfws/us/en/hpe/latest.r/root?contentType=js&switchToCHF=true&hide_country_selector=true&hide_search=true&hide_cart=true&hide_sign_in=true&header_logo=hpe&slim_footer=true" />           <NextScript />         </body>       </Html>     );   } } ',
  },
  {
    name: 'Accordion',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/accordion.mdx',
    content:
      '   ## Guidance ////When seeking to provide maximum content in limited, vertical space, an accordion is a good choice. An accordion is a group of vertically stacked collapsible buttons with title headers. The titles give the user a high-level idea of what content will be disclosed when an accordion panel opens. Accordions help organize information, which helps the user consume the information they need at a faster pace. ### About Accordion ////Accordion has two states: - Collapsed - Expanded **The chevron icon** is used to identify the expand or collapse action while the entire header can be clicked to expand or collapse content. **The default behavior** is for all of the panels to be closed, with the user only having visual to the heading. **The accordion labels** should be kept short and to the point of the information following in each panel. Lengthy panel content will want to be avoided. ### Accessibility ////Buttons are used for the accordion panels which makes them accessible by screen readers and keyboard. Having a very descriptive heading label helps so the user gets to the content section they are interested in faster. Users are able to click anywhere within the panel heading for the state to change to expanded. To help with readability, accordions should only have one panel open at a time. ',
  },
  {
    name: 'All Components',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/all-components.mdx',
    content:
      '     The HPE Design System provides guidance and theming for a large subset of Grommet components, but is not exhaustive. Some, like [DataChart](#datachart) and [Video](#video) have not yet been customized by the HPE Design System. Others, like [Image](#image), [Keyboard](#keyboard), and [ResponsiveContext](#responsivecontext) provide tremendous utility, but may not require specific HPE styling or guidance. Below you will find a comprehensive list of all Grommet components, examples for each, and either a link to Design System usage guidance or Grommet documentation in cases where guidance is not yet available. Jump to a specific component type: - [Layout](#layout) - [Type](#type) - [Controls](#controls) - [Input](#input) - [Visualizations](#visualizations) - [Media](#media) - [Utilities](#utilities) ## Layout ////### Box //// ### Card //// ### Footer //// ### Grid //// ### Header //// ### Layer //// ### Main //// ### Sidebar ////<DocsMessage />  ### Stack //// ## Type ////### Heading //// ### Markdown ////<DocsMessage />  ### Paragraph //// ### Text //// ## Controls ////### Accordion //// ### Anchor //// ### Button //// ### Drop ////<DocsMessage />  ### DropButton ////<DocsMessage />  ### Menu //// ### Nav //// ### Pagination //// ### Tabs //// ### Tip //// ## Input ////### CheckBox //// ### CheckBoxGroup //// ### DateInput //// ### FileInput //// ### Form //// ### FormField //// ### MaskedInput //// ### RadioButtonGroup //// ### RangeInput //// ### RangeSelector ////<DocsMessage />  ### Select //// ### TextArea //// ### TextInput //// ## Visualizations ////### Avatar ////<DocsMessage />  ### Calendar ////<DocsMessage />  ### Clock ////<DocsMessage />  ### DataChart ////<DocsMessage />  ### Diagram ////<DocsMessage />  ### List //// ### Meter ////<DocsMessage />  ### Spinner //// ### Table //// ### WorldMap ////<DocsMessage />  ## Media ////### Carousel ////<DocsMessage />  ### Image ////<DocsMessage />  ### Video ////<DocsMessage />  ## Utilities ////### AnnounceContext ////<DocsMessage />  ### Collapsible ////<DocsMessage />  ### Grommet ////<DocsMessage />  ### InfiniteScroll ////<DocsMessage />  ### Keyboard ////<DocsMessage />  ### ResponsiveContext ////<DocsMessage />  ### SkipLinks ////<DocsMessage />  ### ThemeContext ////<DocsMessage />  ',
  },
  {
    name: 'Anchor',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/anchor.mdx',
    content:
      '    ## Guidance ////Anchors should be used when an element with a link is intended to appear visually like a traditional browser link, text with a simple underline. ### Usage of Anchor vs. Button ////When deciding whether to use Anchor or Button, consider the visual appearance of the element. If the element will look like a traditional browser link, use Anchor. If there will be background or border styling, use [Button](/components/button). Semantically, if you apply an href to either an Anchor or a Button, both will appear as an anchor tag in the DOM. This is why it is important to consider the visual appearance of the element when deciding whether to use Anchor or Button. Here are some contexts in which Anchor should be used: - as inline text links - to add links to resources within contexts such as a form If a clickable element is intended to appear with a background color, border, of hover style, implement this using [Button](/components/button). Use buttons when you are performing an action, such as: "submit," "merge," "create new," "upload," or if you are using a combination of icon and label. ### Anchor Labeling ////It is important that your anchor clearly states to what content the anchor leads. For example, labels such as "Account Information" or "How to change account credentials" are both effective labels that allow the user to have confidence in where the anchor will lead them. ### Accessibility ////**Use \'target\' and \'rel\' props when linking externally:** If clicking an Anchor leads to an external URL, apply these props to the anchor: - target="\\_blank" - rel="noopener" The distinction is important to screen reader users to know what\'s going to happen next. Will I navigate somewhere or will something happen on the page? The "\\_blank" target causes the link to open in a new tab, so the user doesn\'t lose their place on the application. Adding the "noopener" property prevents the newly opened page from gaining access to the original page which helps maintain the security of your application. **Use clear Anchor labels:** It is important to make sure the label of the anchor will allow screen reader users to know where the anchor will lead. Unhelpful Anchor label: - Read more <GrommetAnchor label="here" /> The word "here" is vague. A screen reader user may not know the context of "here". Helpful Anchor label: - Read more <GrommetAnchor label="Anchor documentation" /> This clearly states the type of content to which the Anchor relates. ## Variants ////Anchors are used primarily in text heavy contexts. Here are some ways to use them. ### Inline Anchor ////Anchors are most commonly used as inline elements to bring users to other pages within an application or to external links.  ### Anchor to external site ////Using the \'target\' and \'rel\' props allow you to create smooth user experiences while maintaining security of your application.  ### Anchor in a form ////Using an Anchor within a [Form](/templates/forms) can link users to additional information that may be secondary to form content.  ### Disabled Anchor ////Used to indicate that an anchor cannot be interacted with.  ### Anchor with weight ////A weight can be applied to Anchor in cases where extra emphasis is needed. This example demonstrates an Anchor with `weight="bold"`.  ',
  },
  {
    name: 'Box',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/box.mdx',
    content: '   ',
  },
  {
    name: 'Button',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/button.mdx',
    content:
      '   ## Guidance ////The when, how, and why to use buttons. ### About Button ////Buttons should be used in situations where users might need to: - Submit a form - Begin a new task - Trigger a new UI element to appear on the page - Specify a new or next step in a process ### Button Labeling ////Using the design system Button Component will ensure you’re button looks like a button. Applying the appropriate label is also important in making sure the user has a clear understanding of what the action will do. - Use clear and concise wording. - Avoid contractions or colloquialisms. Keep the language approachable but not personal. - Ensure your button label matches the route destination. ### Buttons vs. Anchors ////The HTML elements for buttons and links (a.k.a. anchors) describe a very specific type of action that is going to be taken when they are used. It is important you know when to use which, as the distinction matters: - Use a link when you’re navigating to another place, such as: a "view all" page, "Jane Chen" profile, a page "skip link" etc. - Use buttons when you are performing an action, such as: "submit," "merge," "create new," "upload," etc. - An action almost always occurs on the same page ### Toggle Buttons ////Toggle buttons are used either to switch between two states, such as checked and unchecked, or to trigger two actions like on or off. #### Toggle Buttons with Icons ////Icon buttons have an `a11yTitle`, `aria-label` or button `label` that describes the action that the user will be performing when using screen readers. **Best Practices:** - Limit to 2-3 descriptive words. - Use verbs first to describe the action such as “Hide/View”, "Switch/Unswitch", “Favorite/Unfavorite”, "Light/Dark" or “Like/Dislike". - Use sentence case capitalization. - Words such as “the” and “a” should be avoided. For Buttons with Icons ONLY, it is important that you show the two following elements: 1. Show the current state of the button through the use of an icon. 2. Inform the user of what will happen when the button is clicked by including `a11yTitle` or `aria-label`. ### Accessibility ////If pressing a Button results in a new URL, or the resultant UI makes sense as "a new browser tab", that is a link `<a>`. Everything else is a `<button>`. The distinction is important to screen reader users to know what\'s going to happen next. Will I navigate somewhere or will something happen on the page? So it\'s important to choose the right HTML element for the job. ## Variants ////There are a couple "flavors" of button depending on use case. ### Primary Button ////Used for key actions on the page. Primary Buttons can also be referred to as “Brand” or “CTA (Call to Action)” and should only be used once per page. All other supporting actions should use [Default Button](#default-button).  Consider that the 80% use case for some pages is visualization and not action.  In cases like these, a call to action is inappropriate and a secondary button can be used.  ### Secondary Button ////Secondary buttons are used to represent calls to action that are either in support of the primary call to action or stand-alone. There can be multiple secondary buttons per page. However, a [default button](#default-button) should be used for any navigation-type actions.  ### Toolbar Button ////Toolbar buttons are used when buttons are placed in a row with other toolbar controls.  A common use case would be when creating a [filtering experience](/templates/filtering). In this situation, a search input, filter button, and action menu are presented as a unified set of controls. The intent is to present each control with equal prominence. To implement, apply `kind="toolbar"` to [Button](/components/button) or Button-based components like [Menu](/components/menu).  ### Default Button ////This is the default appreance and behavior of button. The majority of buttons on your page should use this form of button. If you are designating a primary call to action, use a [primary button](#primary-button). If you are designating a secondary call to action, use a [secondary button](#secondary-button).  ### Color Button ////When looking to accent an interaction or for special use cases that require more importance than a [default button](#default-button), the Color Button can be used to support an HPE sub-brand when appropriate or a serious action (i.e. using red for a destructive task).  ### Button with Icon ////Icons may be incorporated into buttons, either inline with text or as an icon only. When using icon only buttons, the dimension of the clickable area should be kept in mind for its use on mobile devices. Areas too small lead to errant clicks, and as result, poor experience.  ### Button States ////A button\'s visual state may be specified as appropriate in the application\'s context. For example, using "active" for the current item or "disabled" until a set of criteria are met. However, use of disabled controls is discouraged because it tends to elicit a "why?" response from users. It is better to leave buttons active and use messaging upon click to indicate that criteria have not been met. Buttons that do not apply (for reasons of context or permissions) should not be shown at all, rather than being shown as disabled.  ### Button Sizes ////Button label text size may be specified. Padding and rounding scale proportionately to the label size. The default size is medium.  ',
  },
  {
    name: 'Card',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/card.mdx',
    content:
      "   Elements of a card can include titles, subheadings, charts, media, metadata, and notifications. They are flexible and customizable to organize your content.  ## What makes up a Card? ////### Purpose ////- Allows the user to quickly scan and determine if they should engage further - Focused and concise information of a single subject - Primarily limited to a singular action (like a large button) - Secondary actions (e.g. clickable icons, anchors, buttons) should be clearly   distiguishable. When applying these use cases, the card no longer should behave as a primary action. ### Form ////- Aligns to the grid and global edge size for gap, margin, and pad - Shape and direction may be horizontal or vertical - Can include a footer for additional information - Customizable background, border, and elevation ### Content ////- Provides a summary preview of information to scan and process - Visually group content or distinguish various types of information - Organize in a responsive grid or list  ## When to Use ////- When presenting a collection of high-level pieces of information (e.g. dashboard) - When presenting a menu of options (e.g. a catalog of available services) - Best for sets of items which can best be consumed visually ### Dashboard Example ////Cards may be customized to meet the needs of the content they contain. In a dashboard, content is organized and displayed for the user to quickly scan and identify areas which may need for further engagement. Each card is customizable and clickable (like a large button) allowing users to explore the detail behind the summarized content. Learn more about [Dashboard Templates](/templates/dashboards).  ### Card with a Footer ////Adding footer content can help provide additional information that can provide more context, clarity, or display notification data.  ### Card with an Image ////When images are featured on cards, they have a full ‘bleed’ as well as heirachical text to give additional context for the content.  ### Card as a Dashboard Element ////Card's versatility allows for it to serve dashboard contexts quite nicely. The main content can showcase a key performance indicator and be represented by a wide variety of charts or meters. Ideally the key performance indicator is accompanied by a contextual signal, indicating whether a user should drill into the detail behind the metric's current value.  ",
  },
  {
    name: 'Checkbox',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/checkbox.mdx',
    content:
      '   ## Guidance ////CheckBox can be used to present an individual option or group of options to the user. When presented in a group, the user can select a single or multiple options. Refer to CheckBoxGroup for examples. ### Usage ////CheckBox should not be used if a user should only be allowed to select one option from a list of options. In the case that a user should only be able to select one option, refer to [RadioButtonGroup](/components/radiobuttongroup). There are three states which CheckBox provides: - Unchecked - Value has not been selected. - Checked - Value has been selected. - Indeterminate - Used in situations where the CheckBox is a parent to a list of child options. Use the indeterminate state to indicate that only a subset of the child options have been checked. Checked and unchecked states refer to when an individual CheckBox is checked or when all options from a group are checked. ### Toggle ////- [Toggle](#toggle) is a single option which prompts users to choose between two mutually exclusive options. - Toggle is preferred to quickly switch between two possible states. Toggles usually provide immediate results (i.e. no form submission is required) in which gives users the ability to control their preference. - When using toggles the order of text and toggle can be controlled using the [reverse prop](https://v2.grommet.io/checkbox?theme=hpe#reverse). If the toggles  are used in a group that contains only toggles then it is preferred to have the text on the left and the toggle on the right. ### Accessibility ////CheckBox should be used inside of a FormField to ensure that a label is properly associated with the input. The labels on individual checkboxes should clearly describe the purpose of the checkbox. If a CheckBox is used outside of the context of a FormField, it is important to meet accessibility requirements in an alternate way. There should always be clear visual indication, either by text or icon, that describes the purpose of the checkbox. ## Variants ////CheckBox can be used individually, within a group, or as a toggle. A standalone or toggle checkbox indicates that a user is opting-in to the context of the checkbox. Within a group, one or multiple checkboxes can be selected. ### CheckBox with Description ////Adding a description provides the user additional information about the context or purpose of the checkbox.  ### Toggle ////Toggle is a great choice to use when the user is given a single option that they can turn on or off.  ### Validation ////Validation is used to show that the checkbox does not meet the validation requirements of its bounding FormField.  ### Disabled ////Used to indicate that CheckBox cannot be interacted with.  ',
  },
  {
    name: 'Checkboxgroup',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/checkboxgroup.mdx',
    content:
      "   ## Guidance ////CheckBoxGroup should be used to present a group of options to the user. The user can select a single or multiple options. ### Best Practices ////- CheckBoxGroup should be used to select zero or more of options from a list. - In a CheckBoxGroup, options are independent from one another. - Settings changed by checkboxes should not take effect until the user clicks to proceed. - It is recommended to have only 10 or fewer options in a CheckBoxGroup. Use multiple CheckboxGroups if necessary. ### Usage ////**The dos for CheckBoxGroup:** - Always label CheckBoxGroups with short and concise labels. - Give every CheckBox in the group a short, but descriptive value. - Clearly separate Checkbox Groups from other groups on the same page. - Organize Checkboxes in a logical order by grouping related options. - Consider placing most common options first in the group. **The don'ts for CheckBoxGroup:** - Don’t align checkboxes horizontally in a group. - Refrain from using CheckboxGroup when only one item can be selected from a list. ### Accessibility ////When using multiple checkboxes in a single FormField, use a CheckBoxGroup. If you're using a single checkbox, use [CheckBox](/components/checkbox). ## Variants ////CheckBoxGroup contains multiple checkboxes and has various states. When enabled, CheckBoxGroup should always allow one or more options to be selected. ### With description ////Adding a description provides the user additional information about the context or purpose of the CheckBoxGroup.  ### Validation ////Validation is used to show that the CheckBoxGroup does not meet the validation requirements of its bounding FormField.  ### With options as array of objects ////CheckBoxGroup options are typically an array of strings, but they can also be an array of objects.  ### Disabled ////Used to indicate that CheckBoxGroup cannot be interacted with.  ### Scroll ////When many options are available and vertical space is limited, a scrollable checkbox group may be considered.  ",
  },
  {
    name: 'Dateinput',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/dateinput.mdx',
    content:
      '   ## Guidance ////- DateInput can be used to display past, present, or future dates and times. - DateInput provides a more guided experience for collecting dates from the user rather than a plain TextInput. - The format provides MaskedInput constraints on what can be typed and auto-fills fixed characters. - The Calendar Drop provides a familiar visual grid interface. ### When using Date Input, you should: ////- Use a label to instruct user what to do with the control. - Labels should be clear and descriptive. - Correctly format dates to reduce mistakes, such as having the caller specify   the appropriate date format for the locale the user is in. - For example, in the U.S. dates are formatted as ‘mm/dd/yyyy’ whereas   in other countries, such as Europe it might be ‘dd/mm/yyyy’. ## Variants ////DateInput can be configured to support selection of a single date or a range of dates. ### Single Date ////A single DateInput users can either manually input a date or select a date from the calendar  ### Date Range ////DateInput can be configured to allow users to select a start and end date. Users will need to use the calendar to select the range of dates.  ### Validation ////Error messages should clearly identify when a DateInput was not correctly completed and what the user needs to do to fix the error.  ',
  },
  {
    name: 'Fileinput',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/fileinput.mdx',
    content:
      '    ## Guidance ////FileInput is a specialized input providing users a means to select a file or files for upload. ### Usage ////- User must be able to upload a file by clicking the "Select File" button, dragging and dropping a file over the drop region, or tabbing to the FileInput and pressing the Spacebar or Enter key. - When FileInput is in a Form, the file should not be uploaded/saved to a server until the user has submitted the form. - Once a file has been added to the input, a button featuring a Trash icon will appear next to the file name allowing removal of that file. - The "Select File" button should always be visible, allowing the user to add more files/replace a file after they have already selected one. For additional configurations, such as defining accepted file type, all instrinsic HTML properties are supported. For a comprehensive list of these options, you can read more about [HTML input type="file"](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file). ### Accessibility ////When using FileInput within a Form, the FormField wrapping the FileInput should have `htmlFor` and `name` properties that match the `id` and `name` properties placed onto the FileInput. Reference the [FileInput within a Form example](/templates/forms#required-and-optional-fields) to see how to implement. ## Variants ////FileInputs may be configured for uploading single or multiple files. ### FileInput with multiple files ////To allow multiple files to be uploaded, add the prop `multiple`.  ### FileInput within a Form ////<ExampleImagePreview   label="See FileInput Preview"   href="/templates/forms#required-and-optional-fields"   src="/fileinput-form-preview.png"   alt="HPE Design System FileInput Form Example" /> ',
  },
  {
    name: 'Footer',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/footer.mdx',
    content:
      '   ## Guidance ////Footer is used at the bottom of an application. It provides buttons that link to company information and other important links to secondary pages that may not be part of the [Header](/components/header) navigation structure. ### Usage ////A footer is a consistent element to be used at the bottom of all of your applications or webpages. Unlike Header, Footer is not as flexible and contains certain required elements. The most common footer is an [App footer](#app-footer) which is contains legal and other important resources that pertain to the entirety of an application. The other type of footer is a [Page footer](#page-footer) which contains additional actions or resources specific to a single page of an application. ### Application Footer ////A simple, clean and straightforward app footer displays useful information for the user that couldn’t be displayed on the header. This Footer is typically present on every screen of an application and its contents are universal to the entire application. **Always provide these essential links in your footer:** 1. **Copyright information** - It is vital to make it clear that the content within the    website and applications is protected and copyrighted. 1. **Terms of Use** - These guidelines will help ensure partners and customers the    terms of doing business with us. 1. **Privacy** - As a large corporation, it is essential to display a link to    our privacy policy page to let users know that we follow GDPR laws. 1. **Security** - It is important for users to get an overview that explains    our security processes and tools that are used to protect data and users. Check out this [simple Footer example](#) to see how these essential elements are included within a Footer. ### Page Footer ////A page-level Footer provides additional resources or functions for a single page within an application. **A page-level Footer should:** - always be used in addition to the App Footer - be placed above the App Footer in the layout - contain actions relevant to a single page of an app For more guidance, check out an example of [how to use a page-level footer](#footer-for-a-single-page). ### Accessibility ////Wrap buttons at the bottom of a page in a Footer to inform screen readers that the contained content is part of a page footer. This meets accessibility requirements to contain all page content in relevant landmarks. For more information, you can read more on [using landmarks to identify page regions](https://www.w3.org/TR/WCAG20-TECHS/ARIA11.html). ## Variants ////There are various action elements that may live in a Footer, depending on the application or page context. ### Footer for a single page ////A Page Footer should never replace the App Footer. It should be used in addition to the App Footer and placed above the App Footer in the layout. The actions or resources within a Page Footer should pertain only to the content within the current page.  ### App footer with page footer ////Here is how to stack a Page Footer with an App Footer in your layout.  ',
  },
  {
    name: 'Grid',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/grid.mdx',
    content: '   ',
  },
  {
    name: 'Header',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/header.mdx',
    content:
      "    ## Guidance ////Header is used to set the context for an application or a specific page within an application. It is a flexible element that can be composed of a variety of components to aid the user experience in an application. ### About Header ////Header is extremely versatile and can be built by mixing and matching a variety of components to provide users with relevant interactive elements to navigate through or engage with an application. **Common use cases include:** - Creating a navigation structure for an application - Providing a search field for an application or single page within an application - Displaying an action button that affects the application or current page content **Components used within a Header:** Some of the most common components that can be used in Header are [Button](/components/button), Avatar, [Search](/components/search), and [Menu](/components/menu). ### Usage ////While Header is flexible in its composition, there are some important guidelines and use cases to consider. Following these examples and guidance will help ensure your Header is compliant with the HPE Design System standards. **Keep Header contents to a limited set of elements in order to:** - Provide the user with relevant, helpful actions regarding the application or page - Layout smoothly and responsively across all browser widths **Include an App Identity at the start of your header:** - Contains brand logo and application/service name - Links to the landing page of your application ### Application Header ////An app-level Header sets the context for an entire application. It should contain the HPE or Aruba logo alongside text that provides the application name on the left side of the Header. **Here are some elements that are appropriate for an Application Header:** - Application navigation structure - Profile Avatar button that leads to account information - Search field that searches entirety of the application If you have actions that pertain specifically to a single page, consider adding a Page Header to your layout in addition to your App Header. ### Page Header ////A page-level Header sets the context for a single page within an application. It may contain the main heading of the page as well as some actions pertaining to the specific page content. **A page-level Header should:** - always be used in addition to the App Header - be placed below the App Header in the layout - contain actions relevant to a single page of an app For more guidance, check out an example of [how to use a page-level header](#header-for-a-single-page). ### Accessibility ////When using Header as a navigation structure, use [Buttons](/components/button) as your navigational elements and wrap them in a Nav component. This allows screen readers to identify this as a navigation region. For guidance, check out this example of a [Header with navigation buttons](#header-with-navigation-buttons). ## Variants ////There are various action elements that may live in a Header, depending on the application or page context. ### Header with navigation buttons ////Header will commonly be used to provide the navigation structure within an application. On wider screens, the navigational buttons should display in a row. On mobile, these items will be collapsed into a [Menu](/components/menu).  ### Header with main action ////Used for key actions on the page. This action will often pertain to the content on the visible page.  ### Header with search ////Used to provide users with a quick, efficient way to find content. On mobile, the search input collapses into a single button that expands the input field when clicked.  ### Header with avatar ////An avatar may be useful to have in a Header to allow users quick access to account related information. Wrap the Avatar in a [Button](/components/button), or provide an 'onClick' property to turn it into an interactive element.  ### Header with search and actions ////A complex header can be effective for certain application purposes. However, it is important to note that this structure is suited better for wide desktop screens, as it is easy for the content to become crowded as the page width shrinks. Keep in mind the common use context of your user when creating Headers with lots of child elements.  ### Header for a single page ////A Page Header should never replace the App Header. It should be used in addition to the App Header and placed below the App Header in the layout. The actions within a Page Header should pertain only to the content within the current page.  ",
  },
  {
    name: 'Index',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/index.js',
    content:
      "     const title = 'Components'; const pageDetails = getPageDetails(title); const cards = getCards(title); const Components = () => (   <Layout     backgroundImage={{       src: {         dark: '/components-dark.svg',         light: '/components-light.svg',       },       alt: 'HPE Design System',       fit: 'contain',       margin: { top: '-200px', left: '-75px' },       small: {         margin: { top: '-250px' },       },     }}     title={title}     isLanding   >     <Meta       title={title}       description={pageDetails.seoDescription}       canonicalUrl=\"https://design-system.hpe.design/components\"     />     <Box gap=\"large\">       <PageIntro>         <Box justify=\"center\" fill>           <Heading margin=\"none\">{title}</Heading>           <Paragraph size=\"large\" fill>             {pageDetails.description}           </Paragraph>         </Box>       </PageIntro>       <ContentSection>         <Subsection name=\"Layouts\">           <CardGrid cards={cards.filter(card => card.category === 'Layouts')} />         </Subsection>         <Subsection name=\"Controls\">           <CardGrid             cards={cards.filter(card => card.category === 'Controls')}           />         </Subsection>         <Subsection name=\"Inputs\">           <CardGrid cards={cards.filter(card => card.category === 'Inputs')} />         </Subsection>         <Subsection name=\"Visualizations\">           <CardGrid             cards={cards.filter(card => card.category === 'Visualizations')}           />         </Subsection>         <Subsection name=\"All Components\">           <SubsectionText>             View additional Grommet components which haven't been presented             above. Some, like{' '}             <Anchor href=\"/components/all-components#datachart)\">               DataChart             </Anchor>{' '}             {/* // eslint-disable-next-line max-len */}             and <Anchor               label=\"Video\"               href=\"/components/all-components#video\"             />{' '}             have not yet been customized by the HPE Design System. Others, like             {/* // eslint-disable-next-line max-len */}{' '}             <Anchor label=\"Image\" href=\"/components/all-components#image\" />,             Keyboard, and ResponsiveContext provide tremendous utility, but may             not require specific HPE styling or guidance.           </SubsectionText>           <CardGrid cards={cards.filter(card => card.category === 'All')} />         </Subsection>       </ContentSection>     </Box>   </Layout> ); export default Components; ",
  },
  {
    name: 'Layer',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/layer.mdx',
    content:
      '   ## Guidance ////Layer is used to define the properties and behaviors of an overlay for things like a modal dialog or notification. The content of the Layer is defined by the Box component. ### Create ////- Define the container, content, location, and any animation, depending on the intent of the use case (like a notification or modal with a form). - Use the [Box](/components/box) component to define the content of your layer. - Ensure that any next steps for the user are provided to progress or close out of the layer. ### Best Practices ////- Modal is best applied when you need to center attention on specific content, a task, or behavior and not allow interactivity with the underlying content. - Position forms to the right (side-drawer). - Position notifications top or bottom. - Use a close control to guide users to move out of the layer. Provide an alternative to move out of the layer by allowing use of the \'esc\' key or clicking off the container of the layer. - Layer is not great for navigation as it \'hides\' content. Maintain context for the user with layer. ### Using Headings in Layer ////Layer headings should be semantically correct. Treat a Layer as if it were a stand alone page, with the exception that the first heading within a Layer should be an `h2` or `<Heading level={2} />`. All subsequent headings should follow typical [semantic heading structure](/foundation/typography#semantic-usage-of-heading-levels). ### Accessibility ////When using a Layer with `modal={false}`, it is critical that the focus is moved to the "Close" button inside the Layer. This close button should also be given an `a11yTitle` that provides the user with context that they are in a Layer. For example, implementation of this "Close" button for a Layer would be: ``` <Button    a11yTitle={`You are in a layer containing a form to add new hosts.    To close this layer, press Enter.`}   icon={<FormClose />}    onClick={() => setShowLayer(false)}   autoFocus /> ``` ## Variants ////Depending on the use case of a Layer, the placement and layout of content may differ. Here are some common use cases and guidelines for various types of Layers. ### Side Drawer Modal ////A Side Drawer layer is anchored to one side of the screen and acts as a modal. This means that while the layer is open, the rest of the page cannot be interacted with. When a layer contains a [Form](/templates/forms), it should be anchored to the right side of the screen.  ### Center Modal ////A center modal is anchored at the center of the window and acts as a modal. This means that while the layer is open, the rest of the page cannot be interacted with. Center modals may be used to display information without leaving the current context.  ',
  },
  {
    name: 'Main',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/main.mdx',
    content: '   ',
  },
  {
    name: 'Maskedinput',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/maskedinput.mdx',
    content:
      '   ## Guidance ////MaskedInput places syntax restrictions text entered in an input field which allows for efficient, error-free entries. It is similar to [TextInput](/components/textinput), in that it allows the user to input shorter forms of data and content. However, it is used to provide extra guidance and enforcement of input formats. ### Usage ////MaskedInput should be used anytime there is formalized syntax and should always be used within a [Form](/templates/forms). **When using MaskedInput, you should:** - Provide suggestions whenever possible to provide hints of possible values - Use the input mask to restrict input syntax to the desired format - Ensure any syntax separators are automatically inserted if needed, but also allow users to type them MaskedInput reduces the number of input fields needed by allowing multiple criteria to be consolidated into a single input. For example, you can [use MaskedInput to collect storage size amounts and units in a single input](#size-with-units). ### Accessibility ////In every case possible, MaskedInput should be used inside of a FormField to ensure that a label is appropriately paired with the input. This behavior is important to screen reader users who need to know to which context the MaskedInput is referring. Placeholder text does not serve as a sufficient means of restricting syntax. As the user types, the input should auto-format to the intended format. ## Variants ////A MaskedInput\'s visual state informs the user of its ability to be interacted with or if any validation errors have occured. It automatically formats input values to the desired syntax. ### IP Address ////Used to collect a single IP address.  ### IP Range ////Used to collect a range of IP addresses. As the user types, the syntax is filled in automatically.  ### Size with units ////Used to collect information on size, with suggestions that match common size intervals.  ### Email ////Used to email address and formats according to email syntax.  ### Time ////Allows time information to be input with options of 15 minute intervals by suggestion or any custom time by typing.  ### Date ////Used to collect full date where day value suggestions match the number of days in the selected month.  ### Validation ////Used to confirm that an input has been completed properly and to its entirety, even when syntax restrictions are in place. See the difference upon submission when inputting "123.123.123.123" vs. "43.21".  ### Disabled ////Used to indicate that a MaskedInput cannot be interacted with.  ',
  },
  {
    name: 'Menu',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/menu.mdx',
    content:
      '   ## Guidance ////A Menu is a set of actions that may be used to engage with content on a page or to navigate to other pages. When a menu item is clicked, the action will be executed. Menu should not be confused with [Select](/components/select). Though visually similar, Select is often used in the context of a Form and used to choose from a set of values rather than actions. ### Usage ////To create a predictable experience for users, the following are guidelines for using Menu. **It is recommended that you do not have more than 5 items in a menu.** In order to create the most effective user experience, keep the number of items to a minimum. This allows the user to easily understand the scope of the actions they can perform. **Give the menu a clear title.** Instead of labeling the menu as "Menu", provide a name that conveys its purpose. For example, a label of "Account Information" would be appropriate if the menu items associated were actions such as "Change username" or "Reset password". **Keep labels short.** Using a simple, concise label for menu items, such as "Settings" or "Logout", helps the user easily understand the action that will be performed when they click. Longer labels may clutter the layout and create a more effortful experience for the user. **Avoid creating cascading menus.** Menus with multiple layers creates a confusing experience for the user because relevant actions may become nested and difficult to find. Refining menu items to necessary actions creates a more manageable user experience. ### Accessibility ////Accessibility features such as screen reader messages are automatically built into Menu. By default, these messages are "Open Menu" and "Close Menu". However, if a more specific message is necessary, a custom [a11yTitle](https://v2.grommet.io/menu?theme=hpe#a11yTitle) or [messages](https://v2.grommet.io/menu?theme=hpe#messages) may be applied. An icon can be used on a menu item to provide additional context about the action. It is recommended that an icon is used in conjunction with text to ensure the context of the menu item is clear. However, there may be cases where an icon alone is sufficient. For example, highly familiar action indicators, such as this example of [Menu with custom icon](#with-custom-icon) demonstrate when an icon only may be sufficient. ## Variants ////There are various places a Menu may be useful within an application. If the user is going to be selecting from a list of options to execute an action, Menu is a good component to use. The usage of labels and icons allow a menu to be versatile for different layout contexts. ### Within a header ////A menu can be used in a [Header](/components/header) to group related actions.  ### With custom icon ////Adding an icon prop changes the icon that appears on the menu. In some contexts, it may be appropriate to use a more specific or alternate icon. Here is an example Menu being used in a [List](/templates/lists) to indicate actions that can be performed on list items.  ### Disabled ////Used to indicate that a Menu cannot be interacted with.  ',
  },
  {
    name: 'Notification',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/notification.mdx',
    content:
      '   ## What are they for? ////Notifications build trust by providing users confidence and assurance that they are informed with timely, relevant status about their systems and tasks. ## Taxonomy  ////To standardize language for Notifications across HPE projects, be sure to familiarize yourself with this taxonomy: - **Type** - In the broadest terms, what the notification is about - **State** - The current stage within a process - **Status** - The condition of a process - **Attention Level** - The priority and importance of a notification - **Actions** - Interactactions within a notification - **Persistence** - How the notification is dismissed - **Placement** - Where the notification can be found - **Insight** - The content of the notification <TaxonomyTable /> ### State v.s. Status ////A state is the current stage of a process. A status is the condition of the state. Status can also be thought of as a pointer to a state’s “health”.  Here is an example of a Toast Notification that illustrates their differences: <StateVsStatusDiagram /> Keep in mind that a status **derives** from a state. ## Notification Systems ////The following types of notifications are used to provide users with full transparent clarity on tasks and system statuses: - [Status Indicators](/templates/status-indicator) are used within all types of notifications. They capture a user’s attention based on the notification’s level of severity. - For low priority and non-action-oriented notifications, [Toast Notifications](/templates/toast-notifications) are a great way to inform users unobtrusively.  ## Variants ////There are a couple "types" of the Notification component depending on use case. ### Toast Notification ////Toast notifications are used for low attention status messages or updates that do not require user action. For more thorough guidance on how and when to properly make use of a toast, access the full page on [Toast Notifications](/templates/toast-notifications).  ### Roadmap ////The Design System is currently exploring and researching best practices and considerations for notification patterns. Here are some things we have lined out for the future: - Banner - Global - System - Inline - Notification center - Badging & Bell ### Have more questions? ////Please be sure to send them over to the `#hpe-design-system` channel on [Slack](https://slack-invite.grommet.io/)! ',
  },
  {
    name: 'Pagination',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/pagination.mdx',
    content:
      '    ## When to use Pagination ////Use pagination when a user’s goal is to find a specific item rather than to peruse the full set of data. By breaking the data up into smaller, consistently sized groups, the user is more easily able to jump to specific sections of the data. If you expect the user will be scrolling and perusing large amounts of the data set, consider using [Infinite Scroll](https://v2.grommet.io/infinitescroll). Pagination is particularly effective for displaying large sets of results in components such as [Table](#paginated-table), [List](#paginated-list), and [Cards](#paginated-cards). ## Guidelines ////### Number of results per page ////By default, 20 results should show at once. The examples on this page have been modified to show less results per page so that the pagination control is viewable in the single screen. If the user has performed a search resulting in less than 20 results, the pagination component should no longer be displayed. ### Placement of pagination component ////The pagination component should be placed underneath and justified to the end of the content it is paginating. ### Showing summary of results ////It may be beneficial to provide users with a summary of what range of results they are viewing. This should take the format of "Showing 1-20 of 1000" and should be aligned in a row with the pagination component. The results summary should be justified to the start of the row and the pagination component should remain justified to the end of the row. ## Accessibility ////Below are some accessibility requirements that ensure pagination is accessible for screen readers and keyboard navigation. If your team is developing with Grommet, these considerations are already handled, so no further action is required from your team. 1. Wrap pagination links in a `<nav>` element. 1. Provide an `aria-label="pagination navigaton"` and `role="navigation"`. 1. Individual page buttons should have an `aria-label` that reads "Go to page X", where X is the page that will be navigated to upon selection. 1. The active page button should have `aria-current="true"`. 1. The next/previous arrow buttons should have `aria-label` that reads "Go to next page" and "Go to previous page", respectively. For more detailed documentation on these requirements, you can read more about [accessible pagination](https://www.a11ymatters.com/pattern/pagination/). ## Variants ////In addition to [Table](/comopnents/table#paginated) and [List](/templates/lists#paginated), here is another way pagination can be implemented. ### Paginated Table ////Tables often contain large amounts of data. To improve the efficiency that a user can navigate to a specific item or range of items, use pagination.  ',
  },
  {
    name: 'Radiobuttongroup',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/radiobuttongroup.mdx',
    content:
      "   ## Guidance ////### Best Practices ////- Keep labels concise and simple. Avoid lengthy descriptions, however err on clarity over brevity. - If there are more than five options, or if the default value is expected most of the time, consider using [Select](/components/select) instead to avoid cluttering the experience. - Use when the user needs to see all related options. - Radio buttons should always be listed vertically with one choice per line. - Never add sub-categories to a RadioButtonGroup. ### When to use RadioButtonGroup ////RadioButtonGroup is used to lay out a discreet list of mutually related options that are easily visible. RadioButtonGroup requires an input choice, so it is important to be clear with what is being asked of the user on the label. When users should be able to select more than one option, use [CheckBoxGroup](/components/checkboxgroup) instead. ## Variants ////RadioButtonGroup is primarily used to select a single item from a list of two or more options. ### Validation ////Validation styling indicates that a selection was not made. In many cases, a clear label for the group and an error message of 'required' may be sufficient. Bonus points go to messages explaining why a required selection is beneficial to the user.  ### Disabled ////Indicates that the RadioButtonGroup input exists but cannot be interacted with until a precondition is met.  ",
  },
  {
    name: 'Rangeinput',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/rangeinput.mdx',
    content: '   ',
  },
  {
    name: 'Search',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/search.mdx',
    content:
      "   ## Guidance ////Search inputs provide a powerful means for users to access content quickly and efficiently. Many search best practices extend \"behind the scenes,\" such as how query strings are matched to relevant content and to the efficiency in which that information is retrieved. ### Auto-suggestions ////- Provide effective [auto-suggestions](#search-with-auto-suggestions) whenever possible. - Auto suggestions accelerate search and allow users to focus on task completion. ### Returning search results ////- Use \"live filtering.\" When results are visible and quick to filter, results should be filtered as the user types. - Sort results by highest relevance. Relevance can be determined by keyword matching, however, to really elevate user experience, consider implementing probability based approaches. - Persist users' original query. This eliminates the need to re-type and assists query reformation if needed. - Persist users' recently used search queries. Remembering the user's previous efforts respects their time and serves as \"short cuts\" for returning to previously visited content. ### Accessibility ////Search inputs should be accessible. Ensure users have the ability to return results using their keyboard as well as clicking a button. Inputs should always be accompanied by labels for accessibility. An icon may serve as a label if: 1. The icon meaning is well understood. 2. Has an 'aria-labelledby' attribute. For additional detail, see [ARIA form hints](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/forms/Basic_form_hints) and ['aria-labelledby'](https://www.w3.org/WAI/tutorials/forms/labels/#using-aria-labelledby). ## Variants ////Visual and functional extensions for Search. ### Search with Auto Suggestions ////Suggestions provide users instantaneous feedback as they type, and aid by prompting with common search intents most closely matching the query in progress. Helpful matching functions include root word recognition and predictive text. Suggested queries should be sorted from highest probability match to lowest. Limit the number of suggested queries displayed to five or less.  ### Simple Search ////Use simple search when its input field is desired to blend with its surrounding content, such as when used in a [Header](/components/header).  ### Icon Position ////The search icon may be placed either to the right or left of the input field. Icon position is controlled via the [reverse](https://v2.grommet.io/textinput?theme=hpe#reverse) property.  ",
  },
  {
    name: 'Select',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/select.mdx',
    content:
      '   ## Guidance ////Select is a flexible input element able to serve a wide variety of use cases. Though flexible, asking "is Select the best tool in this circumstance?" is a healthy exercise. Variants of Select, such as [Select with Search](#select-with-search), or alternatives like [RadioButtonGroup](/components/radiobuttongroup), [MaskedInput](/components/maskedinput), or [TextInput with suggestions](/components/textinput#textinput-with-suggestions) may be more appropriate for crafting an elegant user experience. ### When to use Select ////Because Select is flexible and familiar, the following questions are helpful to consider alternatives and/or confirm that Select is the most appropriate element: - Is there a need to conserve screen space? Select may be appropriate. - Ensuring collection of standardized values? Select may be appropriate. - Are there less than five options? Consider a [CheckBoxGroup](/components/checkboxgroup) or [RadioButtonGroup](/components/radiobuttongroup) as they may be more efficient for users. Select can hide information and requires extra clicks/taps for users to access that information. - Are there a large number of options? Lengthy scrolling can be problematic for users. Consider [Select with Search](#select-with-search) or [TextInput with suggestions](/components/textinput#textinput-with-suggestions). - Is the select for a State/Province in the context of collecting an address? Consider only asking for ZIP/Postal Code and automatically determining City, State, Country, etc. without user input. - Are the values in list well known and understood, such as Year? Consider [TextInput with suggestions](/components/textinput#textinput-with-suggestions) or [MaskedInput](/components/maskedinput). ### Accessibility ////Using Select as a form field is preferred for user experience. When Select is used in conjunction with FormField, users receive clear indication for the contents and purpose of the input. Additionally, this use promotes best practices in accessibility by ensuring user inputs are accompanied by labels used by assistive technologies. ## Variants ////The Select input is flexible and may be extended to allow for multi-select, search, and create options. ### Multi-Select ////Allow multiple options to be selected. [CheckBoxGroup](/components/checkboxgroup) is also great alternative to consider when multiple selections are desired.  ### Select with Search ////Allow users to quickly find their desired option by incorporating Search within the Select component. Select with search is especially useful when presenting lengthy options lists such as when selecting from countries or regions. [TextInput with suggestions](/components/textinput#textinput-with-suggestions) and [MaskedInput](/components/maskedinput) are also worth considering in circumstances where values are well known.  ### Validation ////Validation styling calls visual attention to the Select input with an error and should be accompanied by text instructing the user how to resolve. A "required" input error is the most common with Select since the available options are typically pre-defined.  ### Disabled ////Indicates that the Select input exists but cannot be interacted with until a precondition is met.  ',
  },
  {
    name: 'Spinner',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/spinner.mdx',
    content:
      '   ## Guidance ////Loading Spinners are used to notify the user that an action is being processed. This reassures the user of the system status.  Loading spinners can be presented in various sizes depending on the context in which the spinner is being used. For fast processes (less than 300ms), a spinner may not be required. However, for a process that may take time, a spinner should be used. Avoid showing multiple Loading Spinners on a single page. ### When to use Spinner ////- When fetching data or content, where the expected response time is greater than ~300ms. - When loading more information into a Table or List. ### Accessibility ////For additional clarity for screen reader users, provide a [message](https://v2.grommet.io/spinner#message) to the spinner that would explain to the user that the content is being loaded. [Message](https://v2.grommet.io/spinner#message) can be provided as a string or as an object in the format of `{ start: ... , end: ... }`, where the "start" message is announced when the Spinner appears and the "end" message is announced when the Spinner closes. ## Variants ////A Spinner can be used in various ways to indicate to the user that a task is in process. ### Spinner within a list //// ### Spinner with announcement on screen reader  //// ### Spinner loading content ////A Spinner allows users to know when something is being loaded without explicitly telling them. When using a spinner in a larger area you can increase the size of the spinner.  ',
  },
  {
    name: 'Stack',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/stack.mdx',
    content: '   ',
  },
  {
    name: 'Table',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/table.mdx',
    content:
      "     ## What makes up a table? ////Tables enable users to accomplish a task by finding records of interest, then take action against them. They present structured data in a grid, with columns and rows to aid readability, scanability, and show the meaning of the data. <TableAnatomy /> **Controls**<br /> Table controls should live above the table and facilitate a user's ability to locate and take actions against records of interest. A controls section may contain [search and filter controls](#searching-and-filtering-tables), as well as [action controls](#selecting-multiple-records-and-batch-actions) such as batch applying settings or data export. **Table header**<br /> Contain table header cells concisely labeling the column's contents. Column headers may be enhanced by enabling [sorting](#sorting). **Table body**<br /> Consists of rows allowing users to scan, read and take action on the data. Rows may be enhanced by enabling actions such as [record selection](#selecting-single-records) and navigation to a record's detailed view. **Table footer**<br /> Optional. Used for presenting summary counts, sums, averages, and other [aggregations](#column-summaries-and-aggregation). <!-- **Cells**<br /> Commonly contain numerical and textual data, but may also include visuals such as meters, status indicators, anchors, and buttons. [Cell variants, actions & behaviors >]() --> ## When to use ////Users interacting with a Table are trying to accomplish one of the following types of tasks. They are not, however, trying to do all of these tasks at once. Keeping \"what is the user setting out to accompish?\" at the center of our mindset helps guide which table features to include and, more importantly, exclude when we add a Table to our interfaces. ### Finding a specific record ////Often, a user's task is to find and take action against a specific record. Whether it be finding a customer's record to review their chat history, tracking a particular order's status, etc., the user experience objective is to enable a user to locate that record as quickly as possible. - Use Search. This is often the quickest, most efficient method for users to find a record of interest. - As backup, use sortable columns coupled with paginated results. This combination   provides users with the knowledge of alpha-numeric range, enabling an   educated guess as to the record's location in the sort.  ### Resizeable columns ////Columns can be resized if a DataTable has the `resizeable` prop applied. Column resizing allows the user to change the width of the header columns. Each column can be resized by dragging the right side of its header to the left or to the right to expand the column.  ### Searching and filtering tables ////Complimenatary elements such as search or filters should be guided by the task the user is setting out to accomplish. - Looking for a specific record? --> Search. - Trying to narrow records down to a set of shared characteristics? --> Filter. - Not quite certain for what I am looking, but I know its general characteristics? --> Filter. See [Filtering](/templates/filtering) for greater detail. ### Navigation via table ////Clicking on a table row takes the user to a context where the most prominent heading matches the primary column text. This context could either be a page or a modal. In this example, clicking on a table row navigates to a detail page.  ### Selecting multiple records & batch actions ////Checkboxes allow for selection of multiple records, which then may apply batch actions via action control buttons or menus.  ### Paginated ////With long sets of data, pagination can help to create a more efficient means of navigating to a specific item or range of items.  ### Fixing header row and/or columns ////Fixing or pinning header rows, columns, or footers allow users to track and maintain context across long and wide data sets.  ### Column summaries & aggregation //// ### Use pagination or infinite scroll with tables ////Should be guided by the task the user is setting out to accomplish. - Browsing? --> Infinite Scroll   - Perhaps I am reviewing a customer's account history. I am not looking for     a particular record, rather I am in scanning mode, trying to get a sense of     the volume and types of interaction with a customer over time. Infinite Scroll     creates a nice, frictionless experirence for this to occur. - Searching for a specific record? --> It depends.   - Do you have a good search experience? --> Infinite Scroll   - Do you have a performant API?   - Do you require page reloads?   - Is your data structured? - Do rows have many interactive elements? --> Pagination   - Be mindful of keyboard users. <!-- To be added. Placeholders for future content. ### Pagination ////### Infinite Scroll ////## Table Cells --> ",
  },
  {
    name: 'Tabs',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/tabs.mdx',
    content:
      '   ## Guidance ////Tabs can be used to rapidly navigate between different content while maintaining the existing context. The Tabs component serves as the outer wrapper and contains individual Tab components as children. ### Usage ////To create a set of Tabs, use the Tabs component as the outer wrapper with Tab components as its children. Providing a title prop to a Tab will populate the text on the actual tab. The children of each Tab will be the content that displays when the given tab is active. **It is recommended that you do not use more than 5 tabs in a group.** In order to create the most effective user experience, keep the number of tabs to a minimum. This allows the user to easily understand the scope of the information presented to them. With more tabs, the information can become overwhelming. **Keep labels short.** Using a simple, concise label such as "Settings" or "Notifications" helps the user easily decide which tab contains the content they need. Longer labels may clutter the layout and create a more effortful experience for the user. **If using Tabs as a navigation structure, be sure to connect them to the browser location.** This will allow proper active styling and routing to function. **If using Tabs as a navigation structure, don\'t use them in conjunction with other navigation structures such as [Global Sidebar](/extend/global-sidebar).** Combining multiple navigation structures creates a confusing experience for the user. It can lead to difficulties in navigating through an application and in ability to remember where desired content lives. ### Accessibility ////Accessibility features such as role and aria-selected are built into Tabs. When a tab is selected, aria-selected is switched to true and toggled to false for all other tabs within the group. If you would like to provide a custom aria-label for screen reader users, you can do so by providing a string to the a11yTitle prop. ## Variants ////Tabs can be used to control what information is presented to a user at a given time. They are effective for grouping information and allowing users to move between those groups without leaving their existing context. ### Tabs with icons ////An icon can be used on a Tab to provide additional context about the information contained within the tab. It is recommended that an icon is used in conjunction with a title to ensure the context of the tab is clear.  ### Tab states ////An individual Tab can take on various states: enabled, disabled, hover, and active. The styling of a tab differs between each of these states as an indicator to the user.  ',
  },
  {
    name: 'Textarea',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/textarea.mdx',
    content:
      '   ## Guidance ////Use TextArea for multi-line input such as notes or comments. TextArea is used frequently within the context of a form, but there may be cases where it would exist independently. Placeholder text can be used to guide the user towards how to start their entry. ### Usage ////In order to give the user a hint about how long their response should be, set the initial size of the TextArea to the length of the response expected. In the context of a FormField, apply resize="vertical" on the TextArea to ensure the TextArea doesn\'t expand beyond the width of the FormField it is contained in. In other contexts, the TextArea should be allowed to resize both vertically and horizontally. ### Accessibility ////In every case possible, TextArea should be used inside of a FormField to ensure that a label is appropriately paired with the input. This behavior is important to screen reader users who need to know what context the TextArea is referring to. If you need to use TextArea outside of the context of a FormField, it is important to make sure the TextArea is labeled in an alternate way to meet accessibility requirements. Placeholder text does not serve as a sufficient means of meeting accessibility requirements for labels. To meet accessbility requirements, placeholder text should be used in conjunction with a label or aria-labelledby attribute. ## Variants ////A TextArea\'s visual state informs the user of its ability to be interacted with or if any validation errors have occured. ### Validation ////Used to indicate that a TextArea does not meet the validation requirements of its bounding FormField. Click the Validate button while the TextArea is empty to see the validation state.  ### Disabled ////Used to indicate that a TextArea cannot be interacted with.  ',
  },
  {
    name: 'Textinput',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/textinput.mdx',
    content:
      '   ## Guidance ////The TextInput component allows the user to input shorter forms of data and content. Passwords and tags can also be used with the TextInput component. Style can be variable, based upon the use case and customer need that will elicit user confidence in success. ## About TextInput ////Text input fields perform text validation. Some use cases for TextInput include username fields, password fields, and search fields. In some cases, it may be beneficial to use an icon to reinforce the context. One example when an icon would be useful would be a search input. There are many ways to give the user hints about how to properly fill out a text input. In addition to the label, placeholder text can help guide the user. When you want to place syntax restrictions on the input, such as an email address or phone number, consider using [MaskedInput](/components/maskedinput). A TextInput display the following states: enabled, focused, focused with value, validation, and disabled. ### Accessibility ////In every case possible, TextInput should be used inside of a FormField to ensure that a label is appropriately paired with the input. This behavior is important to screen reader users who need to know to which context the TextInput is referring. If you need to use TextInput outside of the context of a FormField, it is important to make sure the TextInput is labeled in an alternate way to meet accessibility requirements. One approach is to use another visual indicator, such as the TextInput\'s icon, to serve as the label. See how this is done in the [Labeled by icon](#labeled-by-icon) example. Placeholder text does not serve as a sufficient means of meeting accessibility requirements for labels. To meet accessbility requirements, placeholder text should be used in conjunction with a label or aria-labelledby attribute. ## Variants ////A TextInput\'s visual state informs the user of its ability to be interacted with or if any validation errors have occured. ### Password ////Used to maintain the privacy of the password a user has entered. This is achieved by applying type="password" to the TextInput.  ### With suggestions ////Used to prompt users with available options or suggestions. Suggestions may persist regardless of what the user has entered or may be filtered based on what the user has typed. One common use case for suggestions would be to display prior values for the same field.  ### Labeled by icon ////Some situations may need TextInput without a visual label, such as when implementing a search field. To meet accessibility requirements, the TextInput may be labeled by another visual context such as an icon with an id.  ### Validation ////Used to indicate that a TextInput does not meet the validation requirements of its bounding FormField. Click the Validate button while the TextInput is empty to see the validation state.  ### Disabled ////Used to indicate that a TextInput cannot be interacted with.  ',
  },
  {
    name: 'Tip',
    parent: 'components',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/components/tip.mdx',
    content:
      "    ## Guidance ////Tips can be added to Button by Grommet [tip props](https://v2.grommet.io/button#tip). Tips will display information upon hover and focus. Tips provide messages that give the user more information about an element. ### Usage ////1. Don't use Tips for information that is vital to task completion. 2. Provide a brief and helpful content inside the Tip. 3. Support both mouse and keyboard hover. 4. Use Tip consistently throughout your site. 5. Tip should never contain interactive components. Make sure to test the Tip positioning to ensure that the content does not block other information pertinent to the user's goal. ### Accessibility ////Tips should support both mouse hover and keyboard focus. Do not use Tips for information that is vital for the user to complete the task. ### Truncation with Tip ////To display the full text when truncation occurs, hover over the truncated text and a Tip will be shown with the full text. Upon hovering, Tip presents additional information about a specific element in a small container. The Tip will remain visible as long as the user is hovering over the element. ## Variants ////There are a few different ways that you can use a Tip. ### Truncated Table Cell Content ////Tips are useful to supplement truncated content within a table. In the example  below, many of the service names are lengthy. Truncation may be applied cell content  is constrained by column widths and supplemented with a tip upon hover to reveal the  entirety of the cell's content.  ### Tip with exit ////A Tip can be used to reiterate traditional symbols.  ### Tip Content Length ////Tip may be used for content varying in length. The size of the Tip will scale according to the content provided.  ",
  },
  {
    name: 'Index',
    parent: 'extend',
    path: '/Users/mglissmann/Code/aries/aries-site/src/pages/extend/index.js',
    content:
      "     const title = 'Extend'; const pageDetails = getPageDetails(title); const cards = getCards(title); const Extend = () => (   <Layout     backgroundImage={{       src: {         dark: '/extend-dark.svg',         light: '/extend-light.svg',       },       alt: 'HPE Design System Extend',       margin: { left: '-225px', top: '-85px' },       small: {         margin: { left: '-25px', top: '-100px' },       },     }}     title={title}     isLanding   >     <Meta       title={title}       description={pageDetails.seoDescription}       canonicalUrl=\"https://design-system.hpe.design/extend\"     />     <Box gap=\"large\">       <PageIntro>         <Box justify=\"center\" fill>           <Heading margin=\"none\">{title}</Heading>           <Paragraph size=\"large\" fill>             {pageDetails.description}           </Paragraph>         </Box>       </PageIntro>       <CardGrid cards={cards} />     </Box>   </Layout> ); export default Extend; ",
  },
  {
    name: 'Feedback',
    parent: 'pages',
    path: '/Users/mglissmann/Code/aries/aries-site/src/pages/feedback.js',
    content:
      '     const title = \'Feedback\'; const page = getPageDetails(title); const Feedback = () => (     <Layout title={title} isLanding>       <Meta         title={title}         description={page.seoDescription}         canonicalUrl="https://design-system.hpe.design/feedback"       />       <Box gap="medium">         <Subsection name="Have feedback to share?" level={2}>           <SubsectionText>             Get in touch to help make the HPE Design System better.           </SubsectionText>         </Subsection>         <FeedbackOptions />       </Box>     </Layout>   ); export default Feedback; ',
  },
  {
    name: 'Accessibility',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/accessibility.mdx',
    content:
      'At HPE, we believe in being a force for good. We solve for humanity with humanity. We use technology to make the world better. We are unconditionally inclusive. **We believe that being accessible is a requirement, not an option**. <blockquote>   "The power of the Web is in its universality. Access by everyone, regardless   of disability, is an essential aspect." </blockquote> > &mdash; Tim Berners-Lee, W3C Director and inventor of the World Wide Web ## Built into all Design System tools ////Creating accessible applications means providing experiences that are easily usable by those who rely on keyboard navigation or screen readers, who are colorblind, or who are experiencing some other temporary, situational, or permanent disability. Considerations for sight, mobility, hearing, and cognition are incorporated into all HPE Design System components, patterns, and guidance, providing design and development tools for all teams to build accessible applications. Get started with these [resources and tools](#resources) to perform a baseline audit of the accessibility of your application. ## Accessibility in design ////Usability testing and best practice research build the foundation for all design decisions. Each HPE Design System Figma file contains a "Use Cases and Research" page detailing the considerations and decision making process for a given component. Not part of the Design System Figma? See our [Designer Guidance](/foundation/designer-guidance#setting-up-your-figma-account) to sign up. As an example, the [HPE Design System Colors](/foundation/color) were selected to meet WCAG standards. Notably, text colors are accessible on [background colors](/foundation/color#background-colors) and call-to-action colors, like [HPE Green](/foundation/color#green-color-accessibility). ## Accessibility in development ////We recommend you develop your apps using [Grommet](https://v2.grommet.io/) because it seamlessly integrates with [grommet-theme-hpe](https://github.com/grommet/grommet-theme-hpe) and is built to support keyboard navigation, HTML landmarks, and many ARIA attributes out of the box. While supplemental attributes may need to be implemented and accessibility testing should still be performed, Grommet handles many of the general DOM requirements for you. For guidance on setting up your development environment, see [Developer Guidance](/foundation/developer-guidance). ## Government Standards and Regulations ////To help enforce the World Wide Web\'s accessibility, policies and laws have been put in place which require certain standards to be met for all web, software and non-web documents.  As a designer or developer, we are morally responsible for creating accessible products, and it is necessary that we are aware of the mandated standards established across the world. The following links provide insight into how governments and policy makers have come to include accessibility into laws, emphasizing the importance of making the web inclusive for all. In general, it is helpful to understand some of these policies and how they may affect your work product. - [Web Content Accessibility Guidelines (WCAG) 2.1](https://www.w3.org/TR/WCAG21/): A robust set of international accessibility design guidelines. The guidelines identified as level A and AA are the required design elements for all applications and are incorporated in the US Section 508 standard and HPE\'s Design System. - [U.S. Section 508](https://www.section508.gov/): This site provides guidance for IT accessibility, covering program management, procurement, tools, training, and policy compliance.  - [Americans with Disabilities Act (ADA)](https://www.ada.gov/ada_intro.htm): An equal opportunity law that prohibits discrimination against people with disabilities where public services are offered — now including the public web domain. - [European Accessibility Act (EAA)](https://ec.europa.eu/social/main.jsp?catId=1202): A directive that aims to improve the market for accessible products and services that have been identified as most important for individuals with disabilities. ## Internal Resources ////- [HPE Video Guides on Accessibility (HPE internal link)](https://hpe.sharepoint.com/sites/f5/cto/office/Accessibility/Pages/accessible-design-training.aspx): A collection of educational videos from HPE Product Accessibility Program Office to assist all stakeholders in understanding and implementing accessible design. - [HPE Accessible Web, Software & Hardware Design Guides (HPE internal link)](https://hpe.sharepoint.com/sites/f5/cto/office/Accessibility/Pages/accessible-web-software-and-hardware-design.aspx): Text-based guides from HPE Product Accessibility Program Office on designing and implementing accessible products. ## External Resources ////- [WebAIM Introduction to Web Accessibility](https://webaim.org/intro/): An introduction on how accessibility improves the Web for all users. - [The A11y Project Checklist](https://www.a11yproject.com/checklist/): A checklist using WCAG 2.1 as a reference for developers and designers to ensure their product\'s accessibility.  - [U.S. Web Design System Principles](https://designsystem.digital.gov/design-principles/#embrace-accessibility): These principles and key guidelines outline how you should approach accessibility from a design system perspective. - [WAVE (Web Accessibility Evaluation Tool) Browser Plugin](https://wave.webaim.org/extension/): Scans webpages to identify missing HTML requirements and color contrast standards. - [ANDI Browser Tool](https://www.ssa.gov/accessibility/andi/help/install.html): Activate on a page to check the accessibility of images, headings, color contrast, data tables, links, and more. - [WebAIM Color Contrast Checker](https://webaim.org/resources/contrastchecker/): Check color contrast ratios of specific color values to identify if they meet WCAG AA and/or AAA standards. - [Colorblind Web Page Filter](https://www.toptal.com/designers/colorfilter/): See what your application looks like to users with various types of colorblindness. ',
  },
  {
    name: 'Background Colors-guidance',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/background-colors-guidance.mdx',
    content:
      '      The overall design philosophy is to distinguish content sections with the strategic use of color and avoid the use of excessive borders. This helps reduce visual clutter which a reader\'s eye and brain must sift through. The application of background colors creates a visual hierarchy supporting the information hierarchy for the page. When applying background colors to content or layout, it is helpful to think about the content\'s role and relation to the page\'s information hierarchy. ## Basic or Layered approach? ////There are two approaches to how background colors should be used: [Basic](#basic) or [Layered](#layered). For consistency across an application, a single approach should be used app-wide.  The decision to use the Basic or Layered approach comes down to how much visual differentiation is desired between background and foreground elements. - If a more subtle distinction is desired, use the [Basic](#basic) layout. - If a more defined contrast is desired, such as what is used for this Design System website, use the [Layered](#layered) layout. A single approach should be used app-wide. You should not use the layered approach on some pages of an application and the basic approach on others.  Explore detailed guidance for applying each approach below. ## Basic ////In this approach, background color is oriented to keep the overall user interface focused and clutter-free. The background color is held consistent throughout the page and content section separation is accomplished primarily through the use of typography and spacing (via margins and padding). In the basic approach, visual distinction for a header or an app-wide sidebar from the page\'s primary background is created by applying a second color with significant contrast to `background`. For instance, a dark blue, [persistent navigation sidebar](/templates/persistent-navigation) creates the desired contrast, achieving visual separation of the sidebar from the primary content. - **background** <ColorSwatch background="background" /> - The default background color when no other background color is specified. - **background-contrast** <ColorSwatch background="background-contrast" /> - Used to indicate secondary content. - **background (dark) or another color (dark)** <ColorSwatch background={{color: "background", dark: true, sidebar: true}} /> - Used to indicate a [primary navigation sidebar](/templates/persistent-navigation) or [header](/components/header). Refer to the [background palette](/foundation/color#background-palette) for definition of each background color namespace and value. ### Basic layout with Cards ////`background` <ColorSwatch background="background" /> should be used for the application background as well as foreground elements, like Cards. The header, main content, and cards all use `background` <ColorSwatch background="background" /> for the background color. The sidebar uses a different color <ColorSwatch background={{color: "background", dark: true, sidebar: true}} /> to differentiate it from the rest of the content.  ### Basic layout with supporting content ////In this example, the header and main content use `background` <ColorSwatch background="background" /> and the help text uses `background-contrast` <ColorSwatch background="background-contrast" />. Usage of `background-contrast` and supplemental regions like this should be kept to a minimum.  ## Layered ////The layered approach to background color is oriented towards more complex content situations. In addition to typography and spacing, background colors are used to create separate content sections and promote focus on primary content. In this approach, the overall background color should be `background-back` and specific content sections which should be the primary focus of attention should use <span style={{whiteSpace: \'nowrap\'}}>`background-front`</span>. From an information architecture, as well as from a component layout perspective, `background-back` should not be used within a context which already has <span style={{whiteSpace: \'nowrap\'}}>`background-front`</span>. For instance, a primary navigation header should not use <span style={{whiteSpace: \'nowrap\'}}>`background-front`</span> above a main content section that uses `background-back`. - **background-back** <ColorSwatch background="background-back" /> - The overall background color. - **background-front** <ColorSwatch background="background-front" /> - The background color for content which should be the primary focus. - **background-contrast** <ColorSwatch background="background-contrast" /> - Could be used to indicate a secondary content area within a large content section. - **background (dark) or another color (dark)** <ColorSwatch background={{color: "background", dark: true, sidebar: true}} /> - Could be used to indicate a primary navigation sidebar or header. Refer to the [background palette](/foundation/color#background-palette) for definition of each background color namespace and value. ## Examples of Layered Layout ////For example, a page with a [header](/components/header), summary content, and a grid of [cards](/components/card) would use `background-front` for each card and `background-back` for everything else. For a multi-column page layout, `background-front` could be used to distinguish the column which should be the primary focus. ### With fixed header ////When the header is fixed, use `background-front` <ColorSwatch background="background-front" /> for the header since it is layered in front of the main content.  ### Header scrolls with content ////When the header scrolls with the main content, use `background-back` <ColorSwatch background="background-back" /> for the header since it is flush with the main content. An example of this design would be the Design System website.  ',
  },
  {
    name: 'Color',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/color.js',
    content:
      '         const {   coreColors,   darkColors,   lightColors,   primaryColors, } = colorExamples.palettes; const {   contrastDark,   contrastLight,   darkBackgrounds,   lightBackgrounds, } = colorExamples.backgrounds; const { borderDark, borderLight } = colorExamples.borders; const { inputDark, inputLight } = colorExamples.input; const { elevationColorsDark, elevationColorsLight } = colorExamples.elevation; const { focusColor, layerColor, graphColor } = colorExamples; const { statusColorsDark, statusColorsLight, textColors } = colorExamples.text; const generateColorExamples = (colors, textColor) => (   <Box fill>     {colors.map(color => (       <ColorRow colorSpec={color} key={color.name} textColor={textColor} />     ))}   </Box> ); const title = \'Color\'; const page = getPageDetails(title); const topic = \'Foundation\'; const Color = () => (   // Temp isLanding for proper layout until converted to MDX   <Layout title={title} isLanding>     <Meta       title={title}       description={page.seoDescription}       canonicalUrl="https://design-system.hpe.design/foundation/color"     />     <ResponsiveContext.Consumer>       {size => (         <>           <ContentSection>             <Subsection level={1} name={title} topic={topic}>               <SubsectionText>                 You will notice that the HPE Design System Color guidance is                 different from Brand Central. Prioritize the below HPE Design                 System color palette over Brand Central when identifying colors                 for your app or web based experience.               </SubsectionText>               <ButtonRow>                 <Button                   href="https://www.figma.com/file/eZYR3dtWdb9U90QvJ7p3T9/hpe-design-system-library-color"                   icon={<Figma color="plain" />}                   label="Open in Figma"                   target="_blank"                   secondary                 />               </ButtonRow>             </Subsection>           </ContentSection>           <ContentSection>             <Subsection name="Color Palettes">               <SubsectionText>                 Color is a key way we express our brand. Using color on                 interface elements, how typography is presented, displaying data                 visualizations, and adjusting context of the experience to light                 and dark are just some of the ways we illustrate inclusive                 design for our app and web based experiences.               </SubsectionText>             </Subsection>             <Subsection name="Brand Color" level={3}>               <SubsectionText>                 HPE green symbolizes growth and vitality, commands attention and                 inspires action. Our green is an essential part of our brand                 identity and should be evident in every communication wherever                 possible. Always use the custom color specifications seen here                 to maintain consistency across channels and media.               </SubsectionText>               {primaryColors && (                 <UsageExample pad="none">                   {generateColorExamples(primaryColors)}                 </UsageExample>               )}             </Subsection>             <Subsection name="Core Palette" level={3}>               <SubsectionText>                 HPE Core colors provide a set of swatches that compliment HPE                 Green and help establish the vibrant experience HPE embraces. We                 use "emphasis" as a way to show the  depending on background the text can invert to                 accomodate a dark mode. To ensure text maintains readability, we                 avoid color use with the exception of call to actions such as                 hyperlinks and anchors.               </SubsectionText>               <UsageExample                 themeMode="light"                 label="Light Background"                 justify="between"                 pad={{                   horizontal: \'large\',                   bottom: \'large\',                   top: \'medium\',                   small: {                     horizontal: \'medium\',                     bottom: \'large\',                     top: \'small\',                   },                 }}               >                 {textColors &&                   textColors.map(color => (                     <TextExample                       key={color.name}                       color={color.name}                       hex={color.hex.light}                     />                   ))}               </UsageExample>               <UsageExample                 themeMode="dark"                 label="Dark Background"                 justify="between"                 pad={{                   horizontal: \'large\',                   bottom: \'large\',                   top: \'medium\',                   small: {                     horizontal: \'medium\',                     bottom: \'large\',                     top: \'small\',                   },                 }}               >                 {textColors &&                   textColors.map(color => (                     <TextExample                       key={color.name}                       color={color.name}                       hex={color.hex.dark}                     />                   ))}               </UsageExample>             </Subsection>             <Subsection name="Status Colors" level={3}>               <UsageExample                 themeMode="light"                 label="Light Background"                 pad="none"               >                 {statusColorsLight && generateColorExamples(statusColorsLight)}               </UsageExample>               <UsageExample themeMode="dark" label="Dark Background" pad="none">                 {statusColorsDark && generateColorExamples(statusColorsDark)}               </UsageExample>             </Subsection>             <Subsection name="Focus Color">               <SubsectionText>                 Focus is critical to accessibility. When a user is navigating                 with keyboard, focus indicates which element on the page is                 active. Do not remove focus outline in your application, as this                 will compromise the accessibility of the application.               </SubsectionText>               {focusColor && generateColorExamples(focusColor)}             </Subsection>             <Subsection name="Elevation">               <SubsectionText>                 Elevation creates depth between a foreground and background                 element. Depending on the desired contrast, varying strengths of                 elevation can be used. Elevation is implemented by default on                 certain elements such as{\' \'}                 <Anchor label="Menu" href={nameToPath(\'Menu\')} /> and{\' \'}                 <Anchor label="Select" href={nameToPath(\'Select\')} />.               </SubsectionText>               <UsageExample                 themeMode="light"                 label="Light Background"                 justify="between"                 direction="row-responsive"                 gap={size === \'small\' ? \'medium\' : undefined}                 pad={{                   horizontal: \'large\',                   vertical: \'large\',                   small: { horizontal: \'medium\', vertical: \'large\' },                 }}               >                 {elevationColorsLight &&                   elevationColorsLight.map(color => (                     <ElevationExample                       key={color.name}                       color={color.name}                       hex={color.hex}                     />                   ))}               </UsageExample>               <UsageExample                 themeMode="dark"                 label="Dark Background"                 justify="between"                 direction="row-responsive"                 gap={size === \'small\' ? \'medium\' : undefined}                 pad={{                   horizontal: \'large\',                   vertical: \'large\',                   small: { horizontal: \'medium\', vertical: \'large\' },                 }}               >                 {elevationColorsDark &&                   elevationColorsDark.map(color => (                     <ElevationExample                       key={color.name}                       color={color.name}                       hex={color.hex}                     />                   ))}               </UsageExample>             </Subsection>             <Subsection name="Overlay Color">               <SubsectionText>                 When a <Anchor label="Layer" href={nameToPath(\'Layer\')} /> is                 open, this overlay extends over the rest of the application                 content. It creates a visual distinction between the active                 foreground Layer and the inactive background content. This is                 controlled by `layer.overlay.background` in the theme.               </SubsectionText>               {layerColor && generateColorExamples(layerColor)}             </Subsection>             <Subsection name="Graph Colors">               <SubsectionText>                 Graph colors should be applied in order, starting with graph-0.                 This color order was selected to provide clear distinction                 between adjacent data. When using Grommet DataChart, graph                 colors will be applied in order by default.               </SubsectionText>               {graphColor && generateColorExamples(graphColor)}             </Subsection>           </ContentSection>         </>       )}     </ResponsiveContext.Consumer>     {/* CONTENT MISSING: Disabling following section for MVP launch */}     {/* <Subsection name="Status Colors">         <SubsectionText>           Text needs to be readable in all contexts. Ensuring high contrast is           met for accessibility and readability is  the standard "black" and an inverted mode to accomodate a           dark mode. To ensure text maintains readability we avoid color use           with the exception of call to actions such as hyperlinks and anchors.         </SubsectionText>         <AnchorCallToAction label="See Status Colors" href="#" />       </Subsection> */}     {/* CONTENT MISSING: Disabling following section for MVP launch */}     {/* <Subsection name="Control Colors">         <SubsectionText>           Text needs to be readable in all contexts. Ensuring high contrast is           met for accessibility and readability is  the standard "black" and an inverted mode to accomodate a           dark mode. To ensure text maintains readability we avoid color use           with the exception of call to actions such as hyperlinks and anchors.         </SubsectionText>         <AnchorCallToAction label="Use the Controls" href="#" />       </Subsection> */}     {/* </ContentSection> */}   </Layout> ); TextExample.propTypes = {   color: PropTypes.string.isRequired,   hex: PropTypes.string.isRequired, }; export default Color; ',
  },
  {
    name: 'Designer Guidance',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/designer-guidance.mdx',
    content:
      '## Getting started ////We\'re excited you\'re using the HPE Design System! Below are a set of resources that will help you get started using the HPE Design System components in your designs. If you don\'t find what you\'re looking for, please reach out in the #hpe-design-system channel on [Slack](https://grommet.slack.com). ### Setting up your Figma account ////If you are new to Figma, the [Figma Getting Started](https://help.figma.com/hc/en-us/categories/360002051613-Getting-Started) page is a good place to start. [Create a Figma account](https://help.figma.com/hc/en-us/articles/360039811114-Create-a-Figma-account) with your HPE email address. Using your HPE email provides immediate access to all HPE Design System files. If you would prefer to access the HPE Design System library in a desktop app, you can download the [Figma Desktop App](https://help.figma.com/hc/en-us/articles/360039823654-Download-the-Figma-Desktop-App#Download_the_Desktop_App) for MacOS or Windows. ### Joining the HPE Design System Figma team ////Once you have made a Figma account with your HPE email, you can request to join the HPE Design System team. You can do so by following these steps: 1. Log into Figma and look for an HPE icon in your left control bar. 2. Click on HPE. Here, you will see all HPE Figma teams. 3. Look for "HPE Design System" and click "Request to join". Once you have been added to this team, you will have access to all of the HPE Design System files. ### Before your start designing ////Familiarize yourself with the concepts and components the HPE Design System offers. The [HPE Design System sticker sheet](https://www.figma.com/file/ItdN5pNBubFpV8GP5RowY3/HPE-Component-Sticker-Sheet?node-id=58%3A40) is a great place to get an overview of what the design system offers. Understanding use cases and guidelines for individual components will ensure your designs align with the HPE Design System. Need somewhere to start? Check out the guidelines for [Color](/foundation/color), [Typography](/foundation/typography), [Components](/components), or [Templates](/templates). ### HPE Design System Figma Library ////The [HPE Design System sticker sheet](https://www.figma.com/file/ItdN5pNBubFpV8GP5RowY3/HPE-Component-Sticker-Sheet?node-id=58%3A40) provides a foundation for designing HPE applications. The sticker sheet provides an overview of the components contained within the Design System library. To access individual files for each component, navigate to the HPE Design System Figma team. If you are having trouble accessing the files, you may need to [join the HPE Design System Figma team](#joining-the-hpe-design-system-figma-team) first. Each component has its own library file that demonstrates the various states of the component such as enabled, disabled, hover, active, and focus. The examples within these files can be leveraged within your design files and are built to be interactive and responsive. ',
  },
  {
    name: 'Developer Guidance',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/developer-guidance.mdx',
    content:
      "## Getting started ////We're excited you're using the HPE Design System! Below are a set of resources that will help you get your application set-up with Grommet and the HPE theme. If you don't find what you're looking for, please reach out in the #hpe-design-system channel on [Slack](https://grommet.slack.com). ### Preferred environment ////The HPE Design System is primarily focused on user interfaces developed with ReactJS and Grommet. We encourage teams to use ReactJS and Grommet if possible because there are more resources, examples, and community help for this environment. Questions and feedback should be routed through the #hpe-design-system channel on [Slack](https://grommet.slack.com). ### ReactJS and Grommet starter resources ////If you are new to ReactJS, the [React Tutorial](https://reactjs.org/tutorial/tutorial.html) is a good place to start. If you are already familiar with ReactJS but are unfamiliar with Grommet, check out the [Getting Started with Grommet](https://v2.grommet.io/starter) guide. ### Applying the HPE theme ////Once your project is set up with ReactJS and Grommet, make sure you have the latest [grommet-theme-hpe](https://github.com/grommet/grommet-theme-hpe) theme via `npm` or `yarn`. This will help ensure that your application is aligned with the HPE Design System colors, fonts, and default component styles. ### What if our team doesn't use ReactJS? ////For non-ReactJS environments, such as those with a large code base that are not ready to absorb changing the UI framework, we recommend using the examples and patterns shown in the HPE Design System as a reference. Styles should be matched as closely as possible. Using the browser develop tools to inspect the styling can help with this process. If you have questions or would like some guidance on migrating to ReactJS, please reach out to the [HPE Design System team on Slack in #hpe-design-system](https://grommet.slack.com). ",
  },
  {
    name: 'Human Centered',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/human-centered.mdx',
    content:
      "Human sensitivity to technology, as understood through research and a relentless pursuit of community engagement, allow the Design System to be inclusive, conversational, and adaptable. ## Inclusive ////Meeting WCAG accessibility standards, creating responsive experiences, and adhering to readability guidelines are just the beginning of understanding what it means to be inclusive. Community discussions that allow the Design System to thrive invites new ideas, innovation, and ongoing learning. The Design System seeks to embrace an ethic that honors human engagement in the digital experience, keeping in mind emotional and social implications of the experience. ## Attentive ////Being human-centered requires attention to the needs of others. We first listen to our customers, with curiosity while seeking understanding. Listening attentively is an act of humility and it is a part of our ethos that buildst the community. Being attentive is followed by action through thoughtful presentation of data, utilizing a task-based approach to craft experiences, and ensuring services and application core competencies. ## Conversational ////The HPE Design System elicits a conversation in two ways. It first enables people to craft experiences that engage in an interactive dialogue. The Design System allows for the design to express tone and give voice to an interaction. Each interaction elicits a positive or negative response that compiles into an entire experience for the user. Second, the Design System elicits conversation to continue its evolution, growth, maturity, and adaptability. It will not meet every need and solve every solution. However, it can bring about a conversation to safely allow people to be bold and accelerate what's next. ",
  },
  {
    name: 'Icons',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/icons.mdx',
    content:
      '   Icons can be used to represent information to users, such as actions a user can perform or different types of functionality. It is important that the use of an icon is clear. In some cases, it may be beneficial to pair icons with text to ensure the use of the icon is properly understood, but if text is always needed, consider using the text without an icon. Best practice is to not use icons unless most users are already familiar with their meaning. Otherwise, multiple products may end up using the same obscure icon for different reasons, resulting in confusion for users using those products. <Button   alignSelf="start"   label="See in Figma"   href="https://www.figma.com/file/G99KGffGLFKICy8xRs51lW/HPE-Icons"   primary   target="_blank"   rel="noreferrer noopener" /> ### Developing with Grommet Icons ////For instructions on how to install and use Grommet icons within your application, check out the Grommet Icons site. <Button   alignSelf="start"   label="HPE Theme Grommet Icons"   href="https://icons.grommet.io/?theme=hpe"   target="_blank"   rel="noreferrer noopener"   secondary /> ### Accessibility ////For screen reader accessibility there is an aria-label provided for each icon. The color of the icons should also pass any color contrast ratio. ### Icon within components ////Icons can be used in a variety of different ways. They are used within other components such as [Search](/components/search), [Menu](/components/menu), [Button](/components/button).  ### Icon Sizes ////The default icon size is medium. This should be adjusted depending on where in your application the icon is being used.  ### Button Icons ////The icon should be centered aligned with any text that is being used next to it. The correct size icon should be paired with similar size text. When using the Icon as a button both the label and icon will be wrapped within that Button.  ### Icon Plain Color ////The default icon color is \'text-strong\' for the corresponding light/dark mode. For some icons there are spcific colors in how they are represented, such as HPE, HP, Aruba that need to respect the built in colors for those SVGs so the color prop can be given \'plain\'.  ',
  },
  {
    name: 'Index',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/index.js',
    content:
      "     const title = 'Foundation'; const pageDetails = getPageDetails(title); const cards = getCards(title); const Foundation = () => (   <Layout     backgroundImage={{       src: {         dark: '/foundation-dark.svg',         light: '/foundation-light.svg',       },       alt: 'HPE Design System Foundation',       margin: { left: '-200px', top: '-175px' },       small: {         margin: { left: '0', top: '-300px' },       },     }}     title={title}     isLanding   >     <Meta       title={title}       description={pageDetails.seoDescription}       canonicalUrl=\"https://design-system.hpe.design/foundation\"     />     <Box gap=\"large\">       <PageIntro>         <Box justify=\"center\" fill>           <Heading margin=\"none\">{title}</Heading>           <Paragraph size=\"large\" fill>             {pageDetails.description}           </Paragraph>         </Box>       </PageIntro>       <ContentSection>         <Subsection level={2} name=\"Philosophy\">           <CardGrid             cards={cards.filter(card => card.category === 'Philosophy')}           />         </Subsection>         <Subsection level={2} name=\"Assets\">           <CardGrid cards={cards.filter(card => card.category === 'Assets')} />         </Subsection>       </ContentSection>     </Box>   </Layout> ); export default Foundation; ",
  },
  {
    name: 'Our Brand',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/our-brand.mdx',
    content:
      '  Our logos are a powerful expression of our brand and who we are. The distinctive symbol, we call the "Element," speaks to our focus on customers and their success, with a color which signals growth and opportunity, and an approachable word-mark which says we are welcoming to our partners. This guide also supports, Aruba, a Hewlett Packard Enterprise company, a leading provider of next-generation networking solutions for enterprise whose cloud first approach is part of HPE\'s effort to help our partners address the fundamental changes in today\'s business environment. All usage of the Hewlett Packard Enterprise brand elements is subject to the requirements and restrictions outlined in the [Terms of Use](https://www.hpe.com/us/en/about/legal/terms-of-use.html). For additional guidance refer to [Brand Central](https://brandcentral.hpe.com/home). <Button   alignSelf="start"   href="https://www.figma.com/file/TJUX0lFOOL2eFuVpfMmixx/hpe-design-sytem-library-styles?node-id=1%3A458"   label="See in Figma"   target="_blank"   rel="noreferrer noopener"   secondary /> ## Hewlett Packard Enterprise ////Hewlett Packard Enterprise, also known as HPE has a couple logo variations to help build your experience. Each variation should be used in the appropriate context. Being aware of different uses helps make your experience more compliant. ### HPE Logo ////Use the HPE Logo when establishing the brand and building layouts with less dense content. Place the logo on the top left or bottom left depending on the layout; neither placement is necessarily preferred. <UsageExample label="hpe-logo" themeMode="light">   <Image src="/static/images/hpe-logo.svg" alt="HPE Logo" /> </UsageExample> <UsageExample label="hpe-logo-invert" themeMode="dark">   <Image     src="/static/images/hpe-logo-invert.svg"     alt="HPE Logo Invert"   /> </UsageExample> ### HPE Element ////Always use the HPE Element at the top-left of your service or product experience. To ensure consistency across HPE, the Element should always be accompanied by the company name and product/service name. Do not veer from the layout and spacing of the elements. <UsageExample   label="hpe-element"   themeMode="light"   pad={{     horizontal: \'large\',     vertical: \'medium\',     small: { horizontal: \'xlarge\', vertical: \'large\' },   }} >   <HpeElementExample /> </UsageExample> <UsageExample   label="hpe-element-invert"   themeMode="dark"   pad={{     horizontal: \'large\',     vertical: \'medium\',     small: { horizontal: \'xlarge\', vertical: \'large\' },   }} >   <HpeElementExample /> </UsageExample> ## Aruba Networks ////Aruba Networks, also referenced as Aruba, has a couple logo variations. Each variation should be used in the appropriate context. Being aware of the different uses will help make your experience more compliant. For additional information and guidance view [Brand Central](https://h10014.www1.hpe.com/brand-central/content/aruba). ### Aruba Logo ////Use the Aruba logo when establishing the brand and building layouts with less dense content. Place the logo on the top-left or bottom-left depending on the layout; neither placement is necessarily preferred. <UsageExample label="aruba-logo" themeMode="light">   <Image src="/static/images/aruba-logo.svg" alt="Aruba Logo" /> </UsageExample> <UsageExample label="aruba-logo-invert" themeMode="dark">   <Image src="/static/images/aruba-logo.svg" alt="Aruba Logo" /> </UsageExample> ### Aruba Icon ////Always use the Aruba icon at the top-left of your service or product experience. To ensure consistency across Aruba, the icon should always be accompanied by the company name and product/service name. Do not veer from the layout and spacing of the elements. <UsageExample label="aruba-icon" themeMode="light">   <ArubaIconExample /> </UsageExample> <UsageExample label="aruba-icon-invert" themeMode="dark">   <ArubaIconExample /> </UsageExample> ',
  },
  {
    name: 'Philosophy And-principles',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/philosophy-and-principles.mdx',
    content:
      '## Philosophy ////The HPE Design System contains an open-source library of elements consisting of working code, best practices, design resources, human-centered guidelines, and a vibrant community of contributors. It enables experiences to be crafted with uncompromising integrity. The Design System is built on 3 Pillars: - Human-centered design - A common design language - Collaboration and community ### Human-centered Design ////We provide for the needs of people and their work. The HPE Design System is crafted upon user research and listening to customers first. We strive to create consistent and usable design patterns that will make HPE products and services a joy to use by customers, partners and internal HPE users. ### Common Design Language ////The HPE Design System provides a common language for designers, developers and stakeholders. This allows everyone to speak the same design language without having to translate from one language to another. This also allows for more precise specification of UX requirements. A common set of UX/UI components for designers and developers helps to make implementation easier and more efficient. These pre-built components provide UX consistency, localizability and accessibility. ### Collaboration and Community ////Collaborating with you and participating in ongoing conversation is how we can build and evolve the design system. Your voice is critical to cultivating a relationship that identifies issues and contributes to the growth and vitality of the community. ## Principles ////Our principles provide clear criteria for the concepts, craftsmanship and creativity our brand demands and which our clients deserve. They are for designers and non-designers alike, anyone authoring or authorizing any form of design on behalf of HPE. Designs created using these principles will be innovative and adventurous, purposeful and useful, and composable yet integrated. ### Focus on the experience ////Understanding customer needs is critical to creating great user experiences (UX). - Consider the use cases - Simplify the end-to-end experience, making it elegant, intuitive and easy - Express creativity by empathizing with the user ### Simplify ////Be as simple as possible. Focus on the tasks that users need to do with intentionality and mindfulness. - Reduce visual and cognitive overload - Understand “why” things are needed in your design - Design for the mainstream use cases, yet provide ways to accomplish less frequent tasks ### Be Intuitive ////Create designs that are easy to understand and use. - Make use of affordance and common user interface paradigms - Use consistent patterns and terminology within your design and across designs - Create self-documenting designs to minimize the need to refer to online help and other user documents ### Lead people to success ////Present paths that guide people to accomplish the task or goal they need to achieve. It is the right thing to do and it results in happy customers. - Show only choices and fields that apply to the current context - Organize choices and fields with most common/reasonable first - Reveal additional fields only when they apply - Provide appropriate safeguards to protect the customer and HPE from mistakes or unintentional actions ',
  },
  {
    name: 'Tshirt Sizing',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/tshirt-sizing.mdx',
    content:
      '   ## What is t-shirt sizing? ////T-shirt sizing is the way that Grommet leverages familiar clothing sizes of "small", "medium", "large", and other ranges of sizes to drive the sizing and spacing of components. Grommet maps these t-shirt sizes to specific pixel values. The mapping and pixel value derivation is [explained below](/foundation/tshirt-sizing#the-base-unit). T-shirt sizing controls two aspects of a user interface:  - the [height and width](/foundation/tshirt-sizing#t-shirt-sizing-for-component-dimensions) of layout components - the [spacing](/foundation/tshirt-sizing#t-shirt-sizing-for-spacing-and-other-styles) within and around components (e.g. gap, margin, padding, border, etc.) When designing and developing with the HPE Design System, you should always use t-shirt sizes. If you find yourself specifying custom pixel values, this should be a warning signaling either: - A need to consult with your designer about why a custom value is needed.  - Something in the implementation can and should be simplified. - Or, there could be a gap in the Design System which should be reported and addressed. In nearly every case, designs and development should be using t-shirt sizes for compatibility and maintenance. ## Why do we use t-shirt sizing? ////T-shirt sizing delivers a more unified experience for HPE customers by creating consistent user interfaces across pages and across applications. There are also benefits of t-shirt sizing for designers and developers! T-shirt sizing creates a common language between designers and developers, as well as provides common, well-defined intervals which make designing and developing more efficient. Using pixel values, percentages, or other sizing methods to create layouts can result in applications that are less composable and less scalable. Instead, a container of content may just have a width of "medium", for example, and Grommet will take care of the rest. Finally, t-shirt sizes enable content to responsively scale more easily and consistently. For example, a layout\'s padding may be set to "large" on desktop screen and gracefully adjust to "small" on mobile devices with minimal effort. ## The base unit ////In order to create the range of sizes and their corresponding pixel values, a base unit of `24px` is used as a scalar. Below is a snippet from Grommet\'s [`base.js`](https://github.com/grommet/grommet/blob/master/src/js/themes/base.js) theme file where the calculations and resulting pixel values for the t-shirt sizes driving the height/width for components such as [Box](/components/box) are defined. The `base.js` theme establishes many of the defaults leveraged across Grommet applications. ``` // base.js in Grommet xxsmall: `${baseSpacing * 2}px`, // 48px xsmall: `${baseSpacing * 4}px`, // 96px small: `${baseSpacing * 8}px`, // 192px medium: `${baseSpacing * 16}px`, // 384px large: `${baseSpacing * 32}px`, // 768px xlarge: `${baseSpacing * 48}px`, // 1152px xxlarge: `${baseSpacing * 64}px`, // 1536px full: \'100%\', ``` ## T-shirt sizing for component dimensions ////One of the main ways t-shirt sizing is used is to control the width/height of a component. For some components, like [Box](/components/box), this can be controlled with the `width` and `height` props. For other components, like [Avatar](https://v2.grommet.io/avatar?theme=hpe), [Table](/components/table), or [Text](/foundation/typography#text), the dimensions are controlled by the `size` prop. And others, like [Grid](/components/grid), t-shirt sizes specify `row` and `colum` dimensions. The [Grommet site](https://v2.grommet.io/) provides documentation on the props available to any given component. If you\'re unsure if a component supports `width`, `height`, or `size`, that would be the right place to check. Given the code snippet from the previous section and the explanation on t-shirt sizing for dimensions, if you were to implement the following code, you would have a Box with width of "384px" and height of "192px". ``` <Box width="medium" height="small" /> // width = 384px, height = 192px ``` <Box width="large">   <Image src="/box-sizing.png" alt="Demonstration of t-shirt sizing on Box" /> </Box> ## T-shirt sizing for spacing and other styles ////In addition to overall component dimensions, t-shirt sizing can also be used to define spacing and other styling such as pad, gap, margin, and border. To create the pixel values for these styles, Grommet divides and/or multiplies the base unit of `24px` by various integers. Pad, gap, and margin are controlled by `edgeSize` and the corresponding pixel values also come from [`base.js`](https://github.com/grommet/grommet/blob/master/src/js/themes/base.js) in Grommet ``` // base.js in Grommet edgeSize: {     none: \'0px\',     hair: \'1px\', // for Chart     xxsmall: `${baseSpacing / 8}px`, // 3     xsmall: `${baseSpacing / 4}px`, // 6     small: `${baseSpacing / 2}px`, // 12     medium: `${baseSpacing}px`, // 24     large: `${baseSpacing * 2}px`, // 48     xlarge: `${baseSpacing * 4}px`, // 96 } ``` Given this code snippet, if you were to implement the following code, you would have a Box with width of 384px, height of 192px, and pad of 48px. ``` <Box     width="medium"     height="small"     pad="large" /> ``` <Box width="medium" margin={{bottom: \'large\'}}>   <Image     src="/edge-sizing.png"     alt="Demonstration of t-shirt sizing for pad on Box"   /> </Box> Border sizing is controlled by `borderSize`. ``` // base.js in Grommet borderSize: {     xsmall: \'1px\',     small: \'2px\',     medium: `${baseSpacing / 6}px`, // 4     large: `${baseSpacing / 2}px`, // 12     xlarge: `${baseSpacing}px`, // 24 } ``` Given this code snippet, if you were to implement the following code, you would have a Box with width of 384px, height of 192px, and a border with a width of 2px. ``` <Box      border={{ color: \'border\', size: \'small\' }}     width="medium"     height="small"  /> ``` <Box width="medium" margin={{bottom: \'large\'}}>   <Image     src="/border-sizing.png"     alt="Demonstration of t-shirt sizing for border on Box"   /> </Box> ### Composability and scaling between t-shirt sizes ////Sizes are intended to help give a UI a unified, harmonious experience. Therefore, there is a relationship between the pixel values that each size value maps to. A given size (e.g., medium) is one half of the next size up (e.g., large). ``` small (192px) + small (192px) = medium (384px) medium (384px) + medium (384px) = large (768px) ``` ### Default `size` of "medium" ////For components that support a `size` prop, the default size is `medium`. This means that if you do not specify your own `size`, the component will render with the styling that corresponds with "medium" size. Notice in this example of Button sizes how the "Default" button is the same size as the "Medium" button. In the code, you\'ll see: ``` <Button label="Default" primary /> <Button size="medium" label="Medium" primary /> ``` Because `medium` is the default size, you can simplify your code by implementing a component without the `size` prop when `medium` is the desired size.  ',
  },
  {
    name: 'Typography',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/typography.mdx',
    content:
      '   Our typography is about more than words. It’s an integral part of our personality and design. When we’re making a statement, we want our visual language to be clear, recognized and understood. <Button   alignSelf="start"   label="See in Figma"   href="https://www.figma.com/file/oJhw3JqMemtbwWjlLPWW5O/HPE-Typography-Styles?node-id=149%3A2"   primary   target="_blank"   rel="noreferrer noopener" /> ## MetricHPE Styles ////The weights and styles shown are part of the HPE Design System theme. MetricHPE comes in a varity of weights. For digital experiences we use Light, Regular, Medium, and Bold weights at a variety of scales to compliment the content in a given design. ## Heading //// ### Semantic usage of Heading levels ////For accessibility reasons, always ensure [semantically correct heading levels](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements#Usage_notes) are applied. Heading levels create a scaffold of a web page\'s content structure by defining the main page title, page sections, and subsections of those sections. Correctly implementing heading levels: - establishes a more scannable visual hierarchy - creates a clear HTML structure which is critical for use by assistive technologies If heading levels are not implemented in the correct hierarchy, users of screen readers and other assistive technologies will have a more effortful and difficult experience using the application. ### Best practices for Heading ////- Each web page should only have a single `h1`: `<Heading level={1} />`. - The main page sections following the page title should receive `level={2}`. - Any sub-topics of sections with `level={2}` should receive `level={3}`. - Never skip heading levels. For example, a heading with `level={3}` must always following a heading with `level={2}` but can never immediately proceed a heading with `level={1}`. - Do not use semantically incorrect headings to achieve a desired style. Instead, apply the semantically correct heading, then adjust the size by means of Heading\'s `size` prop. - It is rare that you should need to use a Heading level greater than 3, as this indicates the information on that page may be very dense. Before implementing heading levels 4-6, consider if there is a more concise way to present the page information or to separate it into more sections - Do not use Heading for Card titles since a Card does not define a page section. Instead, use [Text](#text) with a bold treatment. See examples of how to properly implement this in our [Card examples](/components/card). - Treat Layers as if they were their own page with the exceptions that the first heading in a Layer would be a Heading with `level={2}`. Below is an example of how Heading levels should be implemented for a page called "Page title" with 3 topics called Topic A, Topic B, and Topic C. Each topic has 2 subtopics. ``` <Heading level={1}>Page title</Heading>   <Heading level={2}>Topic A</Heading>     <Heading level={3}>Subtopic 1a</Heading>     <Heading level={3}>Subtopic 2a</Heading>   <Heading level={2}>Topic B</Heading>     <Heading level={3}>Subtopic 1b</Heading>     <Heading level={3}>Subtopic 2b</Heading>   <Heading level={2}>Topic C</Heading>     <Heading level={3}>Subtopic 1c</Heading>     <Heading level={3}>Subtopic 2c</Heading> ``` When implementing heading levels, always begin with the correct heading level, then apply `size` adjustments to fit your styling needs. This allows for flexibility in design while maintaining well structured HTML documents needed by assistive technologies. ### Heading Sizes ////If Heading `size` is adjusted, it should be adjusted for all levels. For example, if `size="small"` is desired for a Heading level 1, then "small" should be used for the size of all levels.  ## Paragraph //// ## Text //// ## Fonts for offline usage ////In rare cases where a product needs to reference the MetricHPEXS fonts but users don\'t have internet access from their browser or maybe a designer needs the fonts locally, you can download the fonts for local use. Download MetricHPEXS fonts: [OTF/Vector](https://d3hq6blov2iije.cloudfront.net/fonts/HPEXS-Metric-Fonts/MetricHPEXS-OTF.zip), [Web](https://d3hq6blov2iije.cloudfront.net/fonts/HPEXS-Metric-Fonts/MetricHPEXS-Web.zip) ',
  },
  {
    name: 'Voice And-tone',
    parent: 'foundation',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/foundation/voice-and-tone.mdx',
    content:
      '  Messaging within HPE applications should be informative, concise, and trustworthy. It should be delivered in active, positive, objective, conversational American English and written from a third-person [point of view](#point-of-view). Executed properly, messaging within HPE applications should leave users feeling and perceiving HPE and its products to be intelligent, experienced, inclusive, and trustworthy. ## Messaging Voice, Tone, and Content ////Many definitions for tone and voice exist, however, reading through the various definitions, a common picture emerges: | Voice                         | Tone                                        | | ----------------------------- | ------------------------------------------- | | Who they hear                 | What they hear                              | | Personality                   | Attitude                                    | | How you are doing the writing | Who they hear                               | | Style                         | How your message comes across               | | What makes us uniquely us     | How we communicate to our specific audience | ### Voice ////Voice is who the reader "hears" delivering messaging; embedded within it is the worldview of the author. Voice can be spoken, witty, friendly, formal, etc. At HPE, the desire is for HPE\'s voice to be perceived as intelligent, experienced, objective, inclusive, and trustworthy @mdash; supporting HPE\'s worldview which believes in accelerating what\'s next, making bold moves, the power of _yes we can_, and being a force for good. A person\'s voice typically does not change once established. If HPE\'s voice is inconsistent, people will notice. For example, people notice the difference between writing academically when compared to sounding like a 5-year old. This kind of inconsistency can result in lack of trust. ### Tone ////Tone has to do with what is conveyed or how it comes across. It can express seriousness, urgency, playfulness, objectivity, intimacy, condescension, etc. Unlike voice, tone can change based on the target audience, context, and subject matter. It is situational. For example, tone is very different when giving directions during an emergency compared to when ordering a pizza. Because tone is situational, it may be tweaked to appropriately fit the context within an HPE application. While tone may change, the message should be consistently delivered in [HPE\'s voice](#voice) supporting the perception of intelligence, experience, objectivity, and inclusivity. ### Point of View ////Point of view is the perspective from which the message is written. First person perspective uses words like: I, me, us, we, our, etc. Second person uses any form of the word "you" which has the effect of addressing the reader. Third person directs the reader to things that are neither the writer or the reader. Examples: - _We noticed the server is malfunctioning._ (1st person-ish) - _Your server is malfunctioning._ (2nd person-ish) - _The server is malfunctioning._ (3rd person - no focus on the writer or the reader) ## Guidelines for Constructing Good Messaging ////The following are some high-level guidelines for constructing good messaging: - Use HPE\'s voice and tone   - Conversational American English   - Correct grammar and punctuation   - Active tense   - Human and approachable, not robotic sounding   - Positive, "yes we can," not negative   - Never condescending - Write for all reading levels   - To ensure clear, straightforward and efficient communication, a good benchmark to consider while writing is a United States grade 7 reading level. Check for grade reading level using an app like [Hemingway App](http://www.hemingwayapp.com/). - Respect the user and their time   - Establish context   - Lead with what is most  the administrator is likely     the user and the support contact could be a channel partner. Instead,     provide a direct means to connect the user with the party able to resolve     the issue. - Inspire trust and confidence   - Use informative, concise language   - State facts without coloring them in opinions   - Avoid charged words such as "_error_"   - Focus on the solution, avoid casting blame on the user or software   - Focus on what is needed to be accomplished, avoid personal pronouns     (e.g. I, you, he, she, it, we, they, me, him, her, us, them) - Ensure the voice is human and humane   - Read your message out loud to another person. Is this how you would say it out loud? Does the other person feel this is how two people would converse? ## Capitalization ////The general rule is that things that are sentences should follow sentence capitalization rules. And, things that are titles/headings/labels should follow title capitalization rules. Sentences follow sentence capitalization rules: - Paragraphs of text - Tips - Notifications - Help Titles follow title capitalization rules: - Page/dialog titles - Section headings - Attribute labels - Table column headings - Legends - Tabs/Buttons Capitalize proper nouns. HPE brand and product names are proper nouns. Fight the urge to elevate normal nouns to proper noun status. For example, if you are in a "data sources" page and need to say something about data sources, do not capitalize it. Unless it is a true proper noun, leave it uncapitalized when following sentence capitalization rules. DO NOT USE ALL CAPS IN EITHER TITLES OR SENTENCES. It is harder to read and is equated with yelling. ## Acronyms & Initialisms ////Acronyms and initialisms can be problematic and should be used with care. Because they are shortcuts communicating a concept in a visually shortened form, they tend to become distinct languages for a limited set of "insiders." However, for those who are less fluent or use the language infrequently, acronyms and initialisms are actually detrimental. Acronyms increase the cognitive load on the user, forcing them to "decode" the message before comprehension, and tend to be exclusionary rather than inclusive. If an acronym or initialism is needed, define it the first time it is used. Additionally, only use the acronym if it is used multiple times in the message. - Incorrect: _The UBC is meeting tomorrow._ - Incorrect: _The UBC (University Building Council) is meeting tomorrow._ - Incorrect: _The University Building Council (UBC) is meeting tomorrow._ - Correct: _The University Building Council (UBC) is meeting tomorrow. If you   have UBC-related business, send it to the UBC administrator for addition to   the meeting agenda._ ## Branding ////To aid in comprehension, do not use full brand/product names in messaging. Refer to these with shortened names. For example, "_HPE GreenLake Lighthouse_" is a mouthful and if needed several times in a sentence, set context and consider using a simpler "_Lighthouse_" the second, third, Nth time. ### Maintainability ////A best practice for developers is to use parameter substitution in messaging where branded names occur. A product\'s branding is likely to evolve over time. For example, GreenLake Central recently rebranded as Cloud Services. Imagine the multitude of instances to which the product name was referred. Use of parameter substitution limits the number changes to be made while ensuring brand names are spelled and capitalized consistently in all messages. Implementing messages with a parameterized `${prodname}` instead of hardcoded messages allows for a product\'s branding to be changed easily, confidently, and comprehensively. Lastly, consider formal and informal substitution values which can be used in various contexts. For example: - formal = HPE Ezmeral Container Platform - normal = Ezmeral Container Platform - short = Container Platform ## Language Dos and Don\'ts ////**Do this:** - Use words like "a", "an", "the" so we don\'t sound like a robot. - Add punctuation to the end of each sentence. - Use correct punctuation within a sentence. - Feel free to use contractions. - Adjectives typically come before nouns.   - Incorrect: _the operation specified is…_   - Correct: _the specified operation is…_ - Adjectives in English appear in a specific order. If this order is violated, the sentence will seem odd.   - From the book *The Elements of Eloquence*: ...adjectives in English absolutely have to be in this order: opinion-size-age-shape-color-origin-material-purpose Noun. So you can have a lovely little old rectangular green French silver whittling knife. But if you mess with that word order in the slightest you’ll sound like a maniac. It’s an odd thing that every English speaker uses that list, but almost none of us could write it out.   - There\'s a slightly different order listed in the Cambridge Dictionary.   - Therefore: _two failing SATA SSD drives_ and not _SSD SATA failing two drives_ **Don\'t do this:** - Avoid possessives (e.g. _the server hardware\'s power is off_). - Eliminate run-on sentences. - Don\'t overuse the word "please".  While "please" is allowed, starting every action phrase with the word "please" is not appropriate.  In general, we should be limiting the use of "please". - When the subject of a sentence is a specific resource, do not use that resource’s name as an adjective describing a resource type.  Instead, use the type as an adjective describing the resource:   - Incorrect: _the ABC uplink set has…_   - Correct: _the uplink set "ABC" has…_ - It is not necessary to tell the user to _retry the operation_ in most cases.  For example, if the user has entered incorrect or illegal values, we only need to tell them to specify correct values and do not also need to tell them to retry the operation.  The retry is intuitive and obvious in these cases. - Never tell the user to retry after _some time_.  Be more specific.   - E.g. "_after 3 minutes_" or "_after the refresh has completed."_ - Don\'t tell the user to _try_ or _attempt_ things. It does not convey confidence. Instead, tell them to do things.   - Incorrect: _Try resetting the interconnect._   - Correct: _Reset the interconnect._ - Don\'t say _bad request_. This is blaming the user.  Just explain what is wrong. - Do not use internal terminology in external messaging. - Do not refer to "the" or "your" administrator in messaging.  More often than not, the user reading the message is the administrator. Be more specific. - When making parenthetical comments…   - Don’t add spaces inside the parentheses: _this is bad ( yes it is )._   - Do add spaces outside the parentheses: _this is bad(yes it is)._ The exception would be things like “server(s)”. - Avoid incorrect use of the word "input".   - Incorrect: _Specify a valid certificate as input._   - Correct: _Specify a valid certificate._   - Incorrect: _One of the input parameters is null._   - Correct: _One of the parameters is null._ or _One of the specified parameters is null._ or _The "name" parameter is null._ ## Case Study ////Consider a case with messaging related to a condition where a Kubernetes cluster is running low on available memory. Versions 1-7 highlight bad practices and identify the respective problems within each version. Lastly, a [best practice](#best-practice) example is provided. ### Version 1 ////<ClusterExample>Cluster out of Memory</ClusterExample> Problems: - No punctuation - No verb - No context (what cluster?) - Robotic (robots don\'t use words like "a", "the", "is") - Incorrect capitalization of memory (it is not a proper noun) ### Version 2 ////<ClusterExample>The ABC cluster is out of memory.</ClusterExample> Problems: - It is better to have the resource type (cluster) precede the resource name (ABC). - Names are user-specified and can cause readability issues if not quoted or hyperlinks. See what happens if "ABC" is replaced with names like "the", "storage", "Joe\'s", "obsolete", or any random string containing spaces. - What does "out of memory" actually mean? We should be more specific. ### Version 3 ////<ClusterExample>   The cluster "ABC" is using over 95% of its memory. </ClusterExample> Problems: - Strongly consider hyperlinking any named resource so that a user can directly navigate to it from a notification. - 95% of 10TB means that 500GB are still free. But, 95% of 16GB means only 800MB remain. Showing only percentages doesn\'t offer the user enough context to make a decision. ### Version 4 ////<ClusterExample>   <Text weight="bold">     The cluster <Anchor label="ABC" /> is using over 95% of its memory (42GB of     free memory out of 1TB total).   </Text> </ClusterExample> Problems: - What is the user supposed to do about this? Never raise an issue without offering a solution. ### Version 5 ////<ClusterExample>   <Box gap="small">     <Text weight="bold">       The cluster <Anchor label="ABC" /> is using over 95% of its memory (42GB       of free memory out of 1TB total).     </Text>     <Text>Do the needful.</Text>   </Box> </ClusterExample> Problems: - What is the needful? This is a saying not used in conversational American English and does not give the user specific guidance. ### Version 6 ////<ClusterExample>   <Box gap="small">     <Text weight="bold">       The cluster <Anchor label="ABC" /> is using over 95% of its memory (42GB       of free memory out of 1TB total).     </Text>     <Text>       Remove containers, reduce quotas, or increase the cluster capacity.     </Text>   </Box> </ClusterExample> Problems: - The user purchased the cluster to use it. Telling them to stop using it is not going to go over well. - Is this really a critical issue? Unused resources are often considered wasted resources. It is actually a good thing to be fully utilizing your hardware. - In an aaS world, additional capacity should be a simple add-on to an existing service. As such, this may not be a critical issue, but could be transformed to a lower priority marketing message. ### Version 7 ////<ClusterExample status="info">   <Box gap="small">     <Text weight="bold">       The cluster <Anchor label="ABC" /> is using over 95% of its memory (42GB       of free memory out of 1TB total).     </Text>     <Text>       If you have plans to increase utilization in the near future, additional       capacity can be added by selecting the "Order Capacity" action from the       action menu.     </Text>   </Box> </ClusterExample> Problems: - If possible, give the user a way to directly perform a mentioned action. ### Best Practice ////<ClusterExample status="info">   <Box gap="small">     <Text weight="bold">       The cluster <Anchor label="ABC" /> is using over 95% of its memory (42GB       of free memory out of 1TB total).     </Text>     <Text>       If you have plans to increase utilization in the near future, additional       capacity can be added by selecting the <Anchor label="Order Capacity" />{\' \'}       action from the action menu.     </Text>   </Box> </ClusterExample> - Correct capitalization and punctuation is used. - The named resource is hyperlinked so that a user can directly navigation to it from a notification. - A solution to the issue is provided to the user. - Context on how much available memory is provided. - The user is given a way to directly perform a mentioned action. ## Miscellany ////### Quoting ////In messaging that contains user-specified content, use double-quotes around this content if it is not rendered as a hyperlink. If user-content is rendered as a hyperlink, the hyperlink styling is sufficient to offset the content from other text in the message. Why is this  DROP TABLE Students;--_ (see: [https://xkcd.com/327/](https://xkcd.com/327/)) User-generated input can be arbitrarily long. When confronted with displaying user-generated input, plan for the 80% case, but define which of truncation (with hover) or wrapping will be used. ## Other Common Problems and How To Address Them ////The following are commonly misspelled/mis-capitalized terms: - The following must be spelled/capitalized as shown:   - Kubernetes   - Ethernet   - Fibre Channel   - FCoE   - SNMP, SNMPv3   - ID (not id or Id)   - OK (not ok, Ok, or okay)   - I/O (not IO or i/o)   - API (not xApi) (either that, or be explicit and say X-API-Version) - "Log in" is a verb (e.g. "Log in to the server"). - "Login" is a noun or adjective (e.g. "The login token has expired"). - Use the word "and" instead of an ampersand "&". - Filesystem is one word. - Use "host name" when referring to the name of a host. - Use "hostname" when referring to the Unix command. The following table contains a set of common mistakes found in messaging, along with suggested corrections: | Don\'t                                                                  | Do                                                                      | Notes                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | | ---------------------------------------------------------------------- | ----------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | internal error                                                         | unexpected problem                                                      |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |   | | coding error                                                           | unexpected problem                                                      |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | issue/error                                                            | problem                                                                 |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | Failed to                                                              | Unable to                                                               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | X failed                                                               | Unable to X                                                             |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | since                                                                  | because                                                                 | Unless referring to time                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | | there\'s                                                                | there is                                                                |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | non something                                                          | non-something                                                           |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | can not                                                                | cannot                                                                  |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | associated to                                                          | associated with                                                         |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | as the                                                                 | because the                                                             | Only when it can be substituted with "because the".  There are valid uses of "as the", e.g. X must be the same as the Y. In general, don\'t use "as" where you can use "because".                                                                                                                                                                                                                                                                                                               | | as it has                                                              | because it has                                                          | In general, do not use "as" where you can use "because"                                                                                                                                                                                                                                                                                                                                                                                                                                        | | make sure                                                              | ensure                                                                  |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | check if                                                               | ensure that                                                             | Note: "check if" or "verify that" are never valid resolutions because they don\'t tell you what to do or how to do it. A resolution must be actionable. For example: "Check if the required CA certificates have been added and are valid" is not a good resolution. It does not tell you what to do if the certs have not been added or if the certs have been added but are not valid. Our messaging must lead the user to success &mdash; not leave them guessing.                                | | provide / provided, supply / supplied, give / given                    | specify / specified                                                     | Be careful with blind replacements here. In many cases, it is possible, but our "contact support" message includes the word "provide" and must not be changed to say "...specify a support dump."                                                                                                                                                                                                                                                                                              | | try again / retry operation (when used as the sole recommended action) | Tell the user what they need to change and then tell them to try again. | At minimum, each instance needs to be evaluated more deeply to see what our code could do to prevent the user from doing something we could do ourselves.  If a retry is due to a timeout (proxy, etc), then first see if the code can be changed to use an exponential backoff algorithm to do its own retries.  Any time that retry will be used in messaging, the message itself needs more explanation for what actually went wrong.                                                       | | try again / retry operation (without understanding the larger context) | Understand the context and give the correct recommendation.             | E.g. in a sub-task of "add enclosure", a try again resolution of any kind is inappropriate because the add enclosure will always result in an enclosure resource being created. The user cannot try the enclosure add a second time.                                                                                                                                                                                                                                                           | | should                                                                 | must                                                                    | "Should" does not mean "must". If you say that a value should be 0, that is only a suggestion. If it is a requirement, use the word "must".                                                                                                                                                                                                                                                                                                                                                    | | has to be                                                              | must be                                                                 |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | were / was / had                                                       | are / is / has                                                          | Use "were"/"was"/"had" to refer to the past and "are"/"is"/"has" to refer to the present.  Notifications must typically refer to the present. Wrong: "there were no licenses".  Right: "there are no licenses". Acceptable: "Multiple occurrences of the same network were found…"                                                                                                                                                                                                             | | mark                                                                   | set / specify                                                           | Wrong: "There is more than one setting marked as Required". Better: "More than one setting is specified as required.""                                                                                                                                                                                                                                                                                                                                                                         | | you / your                                                             | TBD                                                                     | We strive to not use personal pronouns in error messaging. It is too easy to blame the user by using personal pronouns. In general, if the sentence can easily be changed to eliminate the use of these pronouns, do so.                                                                                                                                                                                                                                                                       | | as per the                                                             | per the                                                                 |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | hit / hitting                                                          | press / pressing                                                        | Users do not hit the keyboard. They press keys.                                                                                                                                                                                                                                                                                                                                                                                                                                                | | power down / turn off                                                  | power off                                                               | Also consider whether a shutdown is required.                                                                                                                                                                                                                                                                                                                                                                                                                                                  | | ongoing                                                                | in progress                                                             | When referring to tasks, "ongoing" has the wrong connotation: long running perpetual tasks. This is OK: "ongoing server management". Otherwise, use statements like: "the software upgrade is in progress"                                                                                                                                                                                                                                                                                     | | recreate                                                               | re-create                                                               | "Recreate" means to enjoy a leisurely activity. Re-create means to create again. Try to avoid using recreate/re-create, in general, and see if there is a way to rephrase the message without this term.                                                                                                                                                                                                                                                                                       | | getting                                                                | retrieving                                                              |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | updation                                                               | update                                                                  | "updation" is not a word.                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | | is belonging                                                           | belongs                                                                 | Bad example: "Server profile assigned to the hypervisor profile is belonging to enclosure group…"                                                                                                                                                                                                                                                                                                                                                                                              | | is having                                                              | has                                                                     | Bad example: "Server profile assigned to the host is having a different server hardware type…"                                                                                                                                                                                                                                                                                                                                                                                                 | | is not having                                                          | does not have                                                           | Bad example: "Hypervisor host XYZ is not having a server profile attached to it and so it is unsupported."                                                                                                                                                                                                                                                                                                                                                                                     | | is matching                                                            | matches                                                                 |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | is not matching with                                                   | does not match                                                          |                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | | there are not enough                                                   | there are insufficient                                                  | In general, try to avoid this entirely. It is odd to start with "there are" only to end with the fact that this isn\'t true. For example, instead of telling the user that there are insufficient licenses to perform an action, you might tell them that all licenses are in use and the action cannot be performed.                                                                                                                                                                           | | simply                                                                 |                                                                         | Don\'t use this word. Never presume something is simple for the user.                                                                                                                                                                                                                                                                                                                                                                                                                           | | drop down                                                              | menu / selection list                                                   | Refer to either a menu (e.g. action menu) or a selection list.                                                                                                                                                                                                                                                                                                                                                                                                                                 | | screen                                                                 | page / dialog                                                           | A page is commonly a linkable, top-level visualization page shown in a browser. A dialog is a pop-up (sidebar, central, full-page) that overlays a page and typically results from the user performing an action.                                                                                                                                                                                                                                                                              | | verify if / check if                                                   |                                                                         | Don\'t do it. Example: "Please verify if the input is bad." Are we asking them to ensure it is bad or are we asking them to ensure it is good?                                                                                                                                                                                                                                                                                                                                                  | | invalid                                                                | not valid                                                               | Machine translation can incorrectly translate "invalid", so it is better to use "not valid". However, it is even better to use neither and instead be specific about what the problem is. For example, if an input is not valid because it is too long, then tell the user the input is too long instead of telling them it is not valid. See: https://docs.microsoft.com/en-us/style-guide/a-z-word-list-term-collections/i/invalid-not-valid                                                 | | and if                                                                 | Split into two sentences                                                | Bad example: "Retry the operation and if the problem persists, contact your authorized support representative and provide a support dump". Good example: "Retry the operation. If the problem persists, contact your authorized support representative and provide a support dump". In general, each separate option in an error resolution should be either, its own sentence, or in a comma separated list. The last-resort action of contacting support must always be in its own sentence. | ## Conversational American English ////Variations of English are used throughout the world. However, to maintain consistency in HPE\'s voice, the messaging standard is to use conversational American English. Below are common usage and spelling differences between American, Indian, and British English and suggested resolutions for where differences arise. ### British English ////When there is a difference between American and British spelling, use the American spelling. Many British words are spelled ending in "our" such as "colour". Use the American "or" variant instead: color. Many British words are spelled ending in "yse" (analyse) or "ise" (realise). Use the American "yze"/"ize" variants instead: analyze/realize. Additional common differences: | British   | American  | | --------- | --------- | | Licence   | License   | | Cancelled | Canceled  | | Centre    | Center    | | Catalogue | Catalog   | | Behaviour | Behavior  | | Favourite | Favorite  | | Grey      | Gray      | | Chips     | Fries 😊  | | Biscuit   | Cookie 😊 | When using a spelling/grammar checker, set your locale to provide American English suggestions. ### Indian English ////This is a collection of common words or phrases used in India, that are not used in American English: | If you find yourself using this… | Example                                                                                | Use this instead                                                                                                                                                      | Why?                                                           | | -------------------------------- | -------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------- | | Sorted                           | _The feature is not sorted._                                                           | Use either "elaborated", "thought through", "analyzed", "planned".                                                                                                    | Confusing. "Sorted" implies sorting in the computer sense.     | | Thus / Hence                     | _…, thus you must factory reset._                                                      | Use "therefore".                                                                                                                                                      | Uncommon or too formal.                                        | | Do the needful                   | _The server is down. Do the needful._                                                  | This is similar to "do what is necessary" or "do whatever it takes", but neither should be used in our messaging. Instead, be specific about what the user should do. | Never used. We should always be specific.                      | | We will revert back              | I send an email saying "do it like this" and you reply, _Thanks, we will revert back._ | _We will get back to you._                                                                                                                                            | "Revert back" implies going back to a previous revision.       | | Strong all the more              | _makes the case strong all the more._                                                  | _makes the case stronger._                                                                                                                                            | Never used.                                                    | | I have a doubt                   | _I have a doubt about that._                                                           | _I have a question_                                                                                                                                                   | "I have a doubt about that" implies you think it is incorrect. | export const ClusterExample = ({ children, status, ...rest }) => (   <Card     direction="row"     border     round="small"     width={{ max: \'large\' }}     pad="medium"     gap="medium"     margin={{ bottom: \'medium\' }} // to create better spacing on page   >     {status === \'info\' ? (       <StatusInfo color="status-unknown" />     ) : (       <StatusCritical color="status-critical" />     )}     {typeof children === \'string\' ? (       <Text weight="bold">{children}</Text>     ) : (       children     )}   </Card> ); ',
  },
  {
    name: 'Index',
    parent: 'pages',
    path: '/Users/mglissmann/Code/aries/aries-site/src/pages/index.js',
    content:
      '       const title = \'Home\'; const pageDetails = getPageDetails(title); const calcPad = size => {   const val = size !== \'small\' ? \'xlarge\' : \'large\';   return val; }; // These make a box width limited to xxlarge but centered const widthProps = { width: { max: \'xxlarge\' }, margin: \'auto\' }; const Intro = ({ children }) => {   const size = useContext(ResponsiveContext);   return size === \'small\' ? (     <Box>       <Hero height={{ max: \'292px\' }} margin={{ bottom: \'-24px\' }} />       <Card background="none" elevation="none">         {children}       </Card>     </Box>   ) : (     <Stack guidingChild="last">       <Box         align="start"         justify="between"         pad={{ horizontal: calcPad(size) }}         direction="row"         fill         {...widthProps}       >         <Box width="small" />         <Hero />       </Box>       <Box height={{ min: \'medium\' }} justify="center" {...widthProps}>         <Grid           gap="large"           columns={size === \'small\' ? [\'auto\'] : [\'3/4\', \'auto\']}         >           <Card background="none" elevation="none">             {children}           </Card>           {size !== \'small\' && (             <Card background="none" elevation="none" height="small" />           )}         </Grid>       </Box>     </Stack>   ); }; Intro.propTypes = {   children: PropTypes.node, }; const Index = () => {   const size = useContext(ResponsiveContext);   return (     <Layout title={title} isLanding pad={{}} width={{}}>       <Meta title={title} description={pageDetails.seoDescription} />       <Box>         <Intro>           <Box pad={{ horizontal: calcPad(size) }} width={{ max: \'900px\' }}>             {size === \'xxxsmall\' && (               <Card background="none" elevation="none" height="small" />             )}             <Heading margin="none" size="large">               Design, develop and deliver             </Heading>             <Paragraph size="xlarge">               Empower designers and developers to quickly create               accessible enterprise app experiences             </Paragraph>           </Box>         </Intro>         <Stack guidingChild="last">           <Box background="background-front" margin={{ top: \'xlarge\' }} fill />           <Featured {...widthProps} />         </Stack>         <WhatIs {...widthProps} />         <Video {...widthProps} />         <Highlights {...widthProps} />         <Quote />         <Community {...widthProps} />       </Box>     </Layout>   ); }; export default Index; ',
  },
  {
    name: 'Showmore',
    parent: 'pages',
    path: '/Users/mglissmann/Code/aries/aries-site/src/pages/showmore.js',
    content:
      "     const title = 'Show More'; const pageDetails = getPageDetails(title); const cards = getCards(); const featured = [   'Designer Guidance',   'Forms',   'Header',   'Human Centered',   'Developer Guidance',   'Button',   'Navigation',   'Icons',   'Search',   'Typography', ]; const featuredCards = []; const cardOrder = []; cards.forEach(card => {   if (featured.includes(card.name)) featuredCards.push(card);   else cardOrder.push(card); }); featuredCards.sort(   (a, b) => featured.indexOf(a.name) - featured.indexOf(b.name), ); cardOrder.splice(0, 0, ...featuredCards); const ShowMore = () => (   <Layout     backgroundImage={{       src: { dark: '/cards-dark.svg', light: '/cards.svg' },       alt: 'HPE Design System',       margin: { top: '50px', left: '-150px' },       style: { transform: 'scale(1.4)', transformOrigin: 'top left' },       small: {         margin: { left: '-75px', top: '-75px' },       },       useGrid: true,     }}     title={title}     isLanding   >     <Meta title={title} description={pageDetails.seoDescription} />     <Box gap=\"large\">       <PageIntro>         <Box justify=\"center\" fill>           <Heading margin=\"none\">Highlights</Heading>           <Paragraph size=\"large\" fill>             The Design System was created to empower designers, developers, and             others to contribute to making great experiences for the customer.           </Paragraph>         </Box>       </PageIntro>       <CardGrid cards={cardOrder} />     </Box>   </Layout> ); export default ShowMore; ",
  },
  {
    name: 'Code Blocks',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/code-blocks.mdx',
    content:
      '   ## Guidance ////Code blocks can be created using the [react-syntax-highlighter](https://github.com/react-syntax-highlighter/react-syntax-highlighter) tool. Prism or Highlighter.js can be used with react-syntax-highlighter. Highlighter.js is the default, however it can have trouble highlighting JSX, so it is recommended to use Prism instead.  Prism with react-syntax-highlighter supports syntax highlighting for [hundreds of languages](https://github.com/react-syntax-highlighter/react-syntax-highlighter/blob/master/AVAILABLE_LANGUAGES_PRISM.MD). react-syntax-highlighter can be installed with the following command: For yarn users: `yarn add react-syntax-highlighter` For npm users: `npm install react-syntax-highlighter --save` Import the react-syntax-highlighter specifying Prism as the highlighter with the following: `` ### Theming ////The theme exported from [grommet-hpe-theme](https://raw.githubusercontent.com/grommet/grommet-theme-hpe/master/src/js/themes/prism.js) should be used to style code blocks. ### Scrolling ////Horizontal scrolling should be avoided where possible. Vertical scrolling within the code block container is encouraged when a code block is long. ### Line Wrapping ////Long lines should wrap to avoid horizontal scrolling. This option can be specified with `wrapLongLines`. ### Tab Index ////To ensure the code block is accessible to keyboard users the `tabIndex` should be set to 0.',
  },
  {
    name: 'Dashboards',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/dashboards.mdx',
    content:
      '   ## Guidance ////Dashboards provide users peace-of-mind knowing critical measures, applications, and services are healthy; plus, easy access to areas needing attention for the moments when they are not. Well designed dashboards begin by defining the specific purpose and user needs it is serving. Operational dashboards focus on delivering information such as data deviations, current resources, and resource statuses so that users can proactively execute time-sensitive tasks. Analytical dashboards present comparison, relationship, and distribution data supporting analysis and decision making. Regardless of need, each of these templates deliver at-a-glance critical information and quick navigation to underlying detail. Consider: - abbreviated numbers (ex: $1.2M vs $1,234,567.89) - less detail - fewer colors (ex: show 4 pie chart sections and a 5th for other) - larger items and fewer items ',
  },
  {
    name: 'Filtering',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/filtering.mdx',
    content:
      '   ## What makes up filtering? ////Filtering allows data to be narrowed down around a set of specified parameters. When users may not have a specific record in mind but are seeking to group data around a certain set of attributes, filtering should be used to allow the user to narrow the data and take action on relevant records. If a user will likely be looking for a specific record as opposed to groups of data, consider implementing search. ### Controls ////Filter controls should live above the data content and facilitate a user\'s ability to locate and take actions against records of interest. ### Filters ////The way filters are displayed is dependent on the use case, number of filters, and data types of the content. These [general guidelines](#guidelines) are a starting point for how to present filtering in your application, but it\'s  The summary should read "X items", where X is the total number of items. - Filters applied, no selections &mdash; The summary should read "X results of Y items". - Selections made &mdash; The summary should read "X of Y items selected", where Y is the total number of results that meet the filter criteria or the total number of items if no filtering has been applied.  ## Guidelines ////Filtering should help users quickly narrow down data sets by selecting certain parameters to define the relevant data bounds. Different types of inputs may better suited for filtering depending on the type of data. Use your best judgement around which input type is appropriate for the data you are filtering. However, here are a few things to consider: - **Is data presented as Cards or List?** When there is ample screen space, display the filters to the left of the data as [a persistent column](/templates/filtering). Once space becomes limited, use a single filter button that opens a Layer containing the filters. - **Is there more than one filter?** Use a single button with filter icon that [opens a Layer containing the filters](#filters-in-a-right-anchored-layer). - **Is the user going to be selecting multiple options?** Filter with [CheckBoxGroup](#filters-in-a-center-layer). - **Is the user aiming to filter based on a range?** Filter with [RangeSelector](#filtering-with-rangeselector). - **Does your filter have a large number of options (>10)?** Filter with [CheckBoxGroup in a side-anchored Layer](#filters-in-a-right-anchored-layer). Present a prioritized subset of the options to the user first and provide an accompanying "Show more" anchor that will reveal the rest of the options when clicked. When utilizing the "Show more", your filters should be displayed in a side-anchored modal since it provides an intuitive vertical scrolling behavior. - **Does your filter have a massive number of options (>100)?** First consider if you are able to break this filter into more manageable groupings. However, if you are unable to break up the filter options into smaller groups, consider using a [scrollable CheckBoxGroup](/components/checkboxgroup#scroll). This approach should be used as a last resort since research demonstrates that [this pattern is not ideal for user experience](https://baymard.com/blog/inline-scroll-areas). ## More examples of filtering ////### Filtering with RangeSelector //// ### Filtering with Select ////Filtering with Select should be used when the goal of the user will likely be to filter data around one specific criteria. If the user will be selecting multiple criteria, consider using CheckBoxGroup.  ',
  },
  {
    name: 'Forms',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/forms.mdx',
    content:
      '   ## Guidance ////Forms provide a way to collect important data from a user. However, this data is only collected effectively when Forms are built in a way in which users are inclined to fill out in full. ### Usage ////Forms don\'t need to be a tedious task for users to complete, as they often come to be. It is important to ease as much of this effort as possible when building a Form. Making Forms simple to complete leads to increase in form completion. **Follow these guidelines when creating a Form:** - Use as few fields as possible - Wrap all input elements within a FormField - Fill in default values for as many fields as possible - Reveal fields progressively so the user is not overwhelmed - Use clear, concise labels for each field - Use placeholder text as an added visual indication of expected input value format ### Required vs. optional fields ////When possible, restrict Forms only to fields that are required. This ensures that the Form remains concise for the user. However, there may be cases where optional fields may be fitting. When using a mixture of required and optional fields, apply the "required" prop to any given FormField restrict form submission until this field has been completed. ### Using help text ////In most cases, the FormField label should be clear enough to instruct the user how to complete a field. However, if help text is required, ensure that it is kept brief and precise. Help text may be relevant for cases such as [password requirements](#sign-up) or [additional resources](#customize) on a field\'s context. ### Capitalization in forms ////Writing standards contribute to the voice, tone, and grammatical accuracy that inform the experiences we create. These standards are aligned with HPE Brand. Within a form, you should: - Use title case and capitalize short prepositions when they are the last word in a sentence (e.g. Sign Up, Sign Out) - For headings and captions, use sentence case ### Button placement and labeling ////Submit, reset, or cancel buttons should always be placed at the bottom of a Form. Button labels should be specific to the action of the button. For example, a [sign-up form](#sign-up) may have a submit button with label "Sign Up". Alternately, a [password change form](#change-password) may have a button with label "Update Password". Button label specificity provides users confidence in the action they are performing. ### User-Entered Input ////There should be few restrictions on user-entered input. - Resource naming should allow for spaces, punctional characters, unicode characters.     - Examples: Björk Guðmundsdóttir, 联想, John Q. Public, etc. - User-entered input needs to be encoded to prevent [SQL injection](https://www.w3schools.com/sql/sql_injection.asp) and [XSS attacks](https://en.wikipedia.org/wiki/Cross-site_scripting). ### Form submission ////Visual feedback is important to instill confidence in a user after form submission. **On submission, your form should:** - In the case of an error, focus should be placed on the input element where the error occurred. - Provide user with indication that form was submitted successfully (e.g. notification, success page, etc.) - Display all relevant errors accompanied by text explaining actions needed to resolve. - Allow user to continue navigating through the application immediately Never force the user to wait for post-submission processing to complete before they can continue using an application. ### Accessibility ////All Form input elements need to be contained within a FormField. **FormFields need to have:** - A "for" property that matches the id of its child input. If using Grommet, this is applied with the htmlFor prop. - A "name" property applied on both the FormField and its child input element - A clear, concise label ## Sign Up //// ## Sign In //// ## Filter //// ## Sort //// ## Change Password //// ## Settings //// ## Pay //// ## Shipping //// ## Required and Optional Fields ////For standard forms, use an asterisk(\\*) to indicate required field/controls. Optional fields receive no treatment.  ## Customize //// ',
  },
  {
    name: 'Global Header',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/global-header.mdx',
    content:
      '    The Global Header, also known as the HPE Common Header and Footer Web Service, provides a tunable, yet consistent header and footer to be used across all HPE applications. The header is provided as a service and injected into your application at run-time. <Box direction="row" gap="medium" pad={{ bottom: \'large\' }}>   <Button label="View Implementation Details" href="https://h50007.www5.hpe.com/hfws-test-pages/common-hfws-test-page.php" target="_blank" rel="noreferrer  noopener" secondary />   <Button label="Development Team Contact" href="mailto:hpecom-cross-platform-development@hpe.com?subject=Common%20Header-Footer%20Service" secondary /> </Box>  ## Guidelines ////The Global Header is a standardized header to be used across applications. HPE [provides an implementation](https://h50007.www5.hpe.com/hfws-test-pages/common-hfws-test-page.php) to be referenced from your application. Both the header and footer are customizable, allowing consumers to choose various features to enable such as country selector, shopping cart, HPE passport login, privacy statement links, theme mode, and more. Each site or application will have different needs. Some header options may not make sense for some sites. The following sections will help you decide which options to include. ## What makes up the Global Header? ////The full global header with all options enabled looks like this: ![Full HPE Global Header](/templateImages/globalheader-full.png) To configure what parts are shown in the global header for your site, go to the [HPE Common HFWS test page](https://h50007.www5.hpe.com/hfws-test-pages/common-hfws-test-page.php?version=latest.r&cc_ll=us%2Fen&header_logo=&slim_footer=true&hide_search=true&hide_cart=true&hide_country_selector=true&hide_sign_in=true). There you can choose various options and hit `Submit`. The global header at the top of that page will change to include those options, and the code sample on that page will  change to declare the chosen options as parameters in `<script src="https://h50007.www5.hpe.com/hfws/us/en/hpe/latest.r/root?...">` element that configures the header. You can then copy the URL from that `<script>` and use it in the code sample at the top of this page to configure the global header and footer for your site. Let\'s take a closer look at each part of the global header and footer. ### App Identity ////Most sites should choose the default which will be the HPE logo for regular mode or the GreenLake logo for `console` mode. You can force it to use one or the other by specifically choosing HPE versus GreenLake if needed. ![HPE logo](/templateImages/globalheader-hpe.png) ![GreenLake logo](/templateImages/globalheader-greenlake.png) ### Header Main Navigation ////The main navigation in the center of the header provide marketing content. The links allow users to find HPE products, contact support and get more information about HPE. These should also typically be enabled for most sites. ![Global Header Main Navigation example](/templateImages/globalheader-nav.png) ### Search ////<Search /> The *Search* icon allows the user to search hpe.com.  ### Shopping Cart ////<Shop /> The *Shopping Cart* icon goes to the HPE shopping cart for buy.hpe.com. This should only be enabled for sites which have products or solutions for sale. ### Country Selector ////<Language /> The country selector allows the user to go to a language-specific version of hpe.com. This should be disabled for most sites since the link really only takes you back to hpe.com instead of staying on your site. ### Sign in ////![Sign In button](/templateImages/globalheader-sign-in.png) Sign in allows the user to sign in to their HPE Passport account for hpe.com. Enable this option if your site uses features that require a Passport login. ### Cube Menu ////<AppsRounded /> The *Cube Menu* allows access to HPE services available to the user such as GreenLake and other Cloud console applications as well as general HPE links for HPE content like developer.hpe.com, education.hpe.com, etc. This menu should be enabled to allow access to other HPE sites and applications. ### Color Scheme ////**Color Scheme** allows implementors to choose either a light or dark variant of the header/footer. The color scheme you choose should be harmonious with the primary background of your application\'s header and avoid stark contrast which interrupts a user\'s visual flow. If your application supports light and dark modes, consider setting the `color_scheme` parameter with a value of either `light` or `dark` in alignment with the user\'s preference. ## What makes up the Global footer? ////The global footer contains links for privacy information and various opt-out and choices required by European GDPR standards as well US and other privacy requirements. In general these links should be enabled for customer-facing sites. ### Privacy Link ////The *Privacy* link goes to HPE\'s Privacy Statement which explains how HPE manages and protects a users information and respects the relevant privacy standards like GDPR, APEC, etc. ### Terms of Use Link ////The *Terms of Use* link goes to the legal statement that governs the user\'s activity on HPE\'s websites. ### Ad Choices and Cookies Link ////The *Ad Choices and Cookies* link goes to the section of the *Privacy Statement* that explains how cookies are used as well as how you can opt-out of targetted advertisements and analytics data such as Google Analytics and Adobe Analytics. ### Do Not Sell My Personal Information Link ////The *Do Not Sell My Personal Information* link goes to information on how to opt-out of any sale of personal collected by automatic data collection tools. <Box direction="row" gap="medium">   <Button label="View Implementation Details" href="https://h50007.www5.hpe.com/hfws-test-pages/common-hfws-test-page.php" target="_blank" rel="noreferrer  noopener" secondary />   <Button label="Development Team Contact" href="mailto:hpecom-cross-platform-development@hpe.com?subject=Common%20Header-Footer%20Service" secondary /> </Box> ',
  },
  {
    name: 'Hub And-spoke-navigation',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/hub-and-spoke-navigation.mdx',
    content:
      '   ## Guidance ////Hub &amp; Spoke Navigation works well for applications primarily concerned with task execution, as opposed to presenting large volumes of content. The "hub" cleanly presents multiple discreet application sections or "spokes." Each "spoke" keeps the user focused on the task at hand and used independently from other spokes. A hub should consist of no more than five to seven spokes &mdash; if more paths are needed, subsequent hubs are always an option. Each step down provides navigational context back up the information hierarchy. Each page has a primary focus with minimal contextual navigation chrome. ### When to Use Hub &amp; Spoke ////Hub &amp; Spoke should be used when: - Users desire focus on a single application or task at a time. - Presenting an overview of the applications, tasks, or content available, with the ability to drill in for detail. - In cases where a user\'s device is limited in screen real estate. ',
  },
  {
    name: 'Index',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/index.js',
    content:
      "     const title = 'Templates'; const pageDetails = getPageDetails(title); const cards = getCards(title); const Templates = () => (   <Layout     backgroundImage={{       src: {         dark: '/templates-dark.svg',         light: '/templates-light.svg',       },       alt: 'HPE Design System Templates',       margin: { left: '-200px', top: '-125px' },       small: {         margin: { left: '-25px', top: '-175px' },       },     }}     title={title}     isLanding   >     <Meta       title={title}       description={pageDetails.seoDescription}       canonicalUrl=\"https://design-system.hpe.design/templates\"     />     <Box gap=\"large\">       <PageIntro>         <Box justify=\"center\" fill>           <Heading margin=\"none\">{title}</Heading>           <Paragraph size=\"large\" fill>             {pageDetails.description}           </Paragraph>         </Box>       </PageIntro>       <CardGrid cards={cards} />     </Box>   </Layout> ); export default Templates; ",
  },
  {
    name: 'Internationalization',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/internationalization.mdx',
    content:
      ' ## Overview ////Internationalizion (I18N) and Localization (L10N) are  ... const intl = useIntl(); ... <Grommet messages={{ format: options => intl.formatMessage(options) }}> ``` For `react-i18next`: ```jsx  ... const { t } = useTranslation(); ... <Grommet messages={{ format: ({id}) => t(id) }}> ``` Then just provide the Grommet messages along with your other localized messages. See the [Grommet component documentation](https://v2.grommet.io/grommet) for details on what messages are needed. If needed you can also provide customized messages to the Grommet components which need them. The components which have localizable messages also support a `messages` property which accepts their specific messages. In most cases it easiest to provide the messages as above to the `Grommet` component instead. However, if you want to specify customized messages for a component in a few specific use cases you can certainly do that via the `messages` property for those components. ## Examples ////To see some example code and localization of a Grommet application take a look at the [Grommet I18N example](https://github.com/grommet/grommet-i18n). It shows how you can use either `react-intl` or `react-i18next` with Grommet and includes a few localized language examples. ',
  },
  {
    name: 'Lists',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/lists.mdx',
    content:
      "   ## Guidance ////The when, how, and why to use lists. ### About Lists ////HPE Design System list view templates are go-to patterns for displaying homogeneous data such as services, devices, users, and more. List views are optimized for scanability and reading comprehension. Each list item provides users focused information and identity labels to aid selection, decision making, and action. ### Usage ////A list is primarily used for: - Looking for specific data or information. When coupled with search or filters, it provides a quick means of scanning to find something. - Aggregating. When coupled with search or filters, it provides a summary of what items match the search/filter criteria and verification of the matching items. - Selecting multiple items to perform an action with them. ### Best Practices: ////- Be consistent with layout and visual treatments for all list items. - Keep list item descriptions brief and concise. - Use icons or images in list items to help draw attention and support scanning. - Maintain sufficient space between list items or consider using dividers between rows. - Sort lists in a logical order such as alphabetically, numerically, chronologically, or by user preference. ### Types of Lists ////The following list types are supported: - Single-line lists are optimal for scan-ability, especially with the addition of an image. - Two-line lists provide a primary and secondary text which can be helpful when more detail is needed. - Three-line lists of a primary text and two lines of secondary text are not recommended. ### Selection ////Use either selection of a whole list item or clickable areas on a list item (such as the action menu button). Do not combine these. Use hover states to indicate which kind of selection is being used. If the entire list item is clickable, the background of the list item receives the active background color and the cursor changes to a pointer hand. Otherwise, there is no hover state for a list item that is not interactive. If a list item contains an action button (or other clickable area), then that button respects its natural hover behavior. **Selection use cases include:** - A list with selectable items and a single action menu on the same page, allows for multi-selection of items - A list with selectable items and no action menu on the same page, allows an item to be selected. When an item is selected, a detail view can be shown with a single action menu for performing other things, such as powering on or off a device. Multi-select is not supported. - A list without selectable items, but an action menu on each item, allows an action to be performed inline on a single item. Multi-select is not supported. ### Action Menu in List Item ////- If space is limited, then don’t use an Action Menu in a List item (repetition of the Action Menu icon uses a lot of space) - If more context is needed to perform an action, the entire list row should be clickable and should route the user to a detail page for the List item. On this detail page, an Action Menu can be provided to allow the user to engage with the data. - If an action is simple and the results can be seen in the List contents (e.g. enable/disable), then use an Action Menu in a List item - If multi-select is required, then don’t use the Action Menu in the List item. ### Long Lists ////- Add a sticky header for the list - Avoid using multiple vertical scrollbars - For really long lists (i.e. hundreds or thousands), consider limiting the number of items that can be shown at a time and provide some mechanism for accessing the rest of the items, such as infinite scrolling with lazy retrieval and rendering - Provide search and filtering capabilities to allow customers to quickly find specific list items - Avoid pagination. It tends to cause a more complicated user experience, especially when selection and/or automatic updating are involved. ### Responsiveness ////Examples are included for different screen sizes – Desktop, Laptop and Mobile. Lists should span the width of the container they are laid out in ### Wrapping vs Truncation: ////- Long data in lists should be wrapped, rather than truncated. - It’s about respecting the user’s content; that is, the words they type in. - We have customers who use long names (>100 chars) and they really need to distinguish one from the other. Truncating often ends up with multiple list entries that look the same, but really aren't. - It can also apply to automatically generated data, such as product names and descriptions. - If for some reason the “Do not truncate” rule must be broken, then a way must be provided to see the entire content. ### Accessibility ////Lists are usually easier to navigate than tables. When creating a design that uses a table, especially a simple table, consider whether a list could be used instead. **Keyboard navigation:** When list items are interactive, the Tab key can be used to focus on the List. The focus is always on the list itself and up/down arrow keys are used to move an indicator demonstrating which item will be clicked when the Enter key is pressed. **Screen readers:** Each list should also have a clear aria-label indicating what the list contains and a summary of the contents, such as how many items are in the list. ### List vs Table ////A List or a Table can be used to represent a set of related items, such as servers or devices or users. The one that is chosen will depend on the specific use cases that need to be supported. - If space is limited, a List uses less room than a Table - Use a List, If scanability is desired. It’s easier to read than a Table - If items can be selected using only the List contents, then use a List ## Variants ////Examples of common lists. ### Icon + Name + Option ////Single-line list with an icon, primary title, and a short status tag. In this example, the list items are clickable.  ### Name + Description + Option ////Two-line list with primary title, description, and a short status tag.  ### Name + Option + Action ////Single-line list with a primary title, short status tag and an action button.  ### Image + Name + Description ////Two-line list with an image, primary title, and a description.  ### Paginated ////With long sets of data, pagination can help to create a more efficient means of navigating to a specific item or range of items.  ### Item order ////List supports `onOrder` property which allows the user to re-order the list by dragging items or pressing up and down controls. Choose `Actions -> Re-Order Items` to enable drag and drop of list items and move up/down controls. While in re-ordering mode, take note of how the row content is top-aligned. For **multi-line** list items like this use case, list items should be top-aligned for easy scanning across a row. To implement top-alignment for multi-line lists, use the prop `defaultItemsProp` on List: ``` <List defaultItemsProp={{align: 'start'}} ...any additional props <List/> ```  ",
  },
  {
    name: 'Navigation',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/navigation.mdx',
    content:
      "    export const title = 'Navigation'; export const topic = 'Templates'; export const page = getPageDetails(title); export const relatedContent = getRelatedContent(title); export const navPatterns = [   'Hub and Spoke Navigation',   'Persistent Navigation', ]; export const navCards = navPatterns.map(pattern => getPageDetails(pattern)); export const globalSidebar = getPageDetails('Global Sidebar'); export const routerExample = getPageDetails('React Router'); View navigation patterns and templates for HPE applications, learn how to incorporate Global Sidebar into applications living in the HPE as-a-service ecosystem, and see how to implement leading React routing packages with navigation templates. ## Patterns ////Recommended patterns, templates, and examples for use within the context of a single application, website, or subsection within an application. Plus, demonstration for how local navigation patterns, such as [Hub & Spoke](/templates/hub-and-spoke-navigation) and [Persistent Navigation](/templates/persistent-navigation), may be combined with the [Global Sidebar](/extend/global-sidebar) for easy maneuverability across applications within the HPE ecosystem. ### Navigation Within an Application ////Flexible in nature, the following patterns can be applied to present contextual, supplemental, and hierachical needs within an application or subsection of a larger application. - [Hub & Spoke patterns](/templates/hub-and-spoke-navigation) lend themselves well to applications primarily concerned with task execution. - Reach for [Persistent Navigation](/templates/persistent-navigation) when a user needs orientation or easy access to application sections. <CardGrid cards={navCards} /> ",
  },
  {
    name: 'Page Layouts',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/page-layouts.mdx',
    content:
      '      Here are some common layouts to get you started: <LayoutPreviewGrid /> ## Guidance ////The when, how, and why to use page layouts. ### About Page Layouts ////Choosing a page layout is an  export const LayoutPreviewGrid = () => {   const size = useContext(ResponsiveContext);   return (     <Grid       columns={size !== \'small\' ? \'medium\' : \'100%\'}       rows={[[\'auto\', \'full\']]}       gap="medium"       justify="center"       fill     >       {layouts.map(layout => (         <ContentPreviewCard           forwardedAs="a"           style={{ textDecoration: \'none\' }}           href={`#${nameToSlug(layout.name)}`}         >           <Box height="small" width="100%" round="xsmall">             {layout.preview}           </Box>           <Text weight="bold" size="large" margin={{ top: \'small\' }}>             {layout.name}           </Text>         </ContentPreviewCard>       ))}     </Grid>   ); }; ',
  },
  {
    name: 'Persistent Navigation',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/persistent-navigation.mdx',
    content:
      '   ## Guidance ////Persistent navigation aids users by maintaining context of where they are within an application. This presence eases the user experience, especially in information rich applications. This pattern can be applied in both local and global contexts. ### When to Use Persistent Navigation ////Persistent navigation should be used when: - A user needs to easy access to move from one area of an application to another with minimal clicks. - Elements such as branding or search are present since they require a ubiquitous presence. ## Variants ////Persistent navigation can be executed in several forms such as headers, app bars, and sidebars. Regardless of choice, attentiveness to how each of these forms present and behave on various device sizes is critical. In the variants below, pay special attention to how they behave in mobile contexts. ### Header as Persistent Navigation ////Headers often contain persistent elements such as search, session, and branding, plus navigation links. When executed as a header, navigation choices should contain no more than four to five elements. Be sure to check out [Header](/components/header) to see the many variants and versatility Header enables.  ### Minimal Sidebar ////It is recommended that Sidebar limits the number of navigation choices to 5-7, as navigation choices are often mixed with elements such as user or session. Sidebars transform to a horizontal orientation on mobile devices. Be sure to use the "See Fullscreen" in the example below to explore the minimal sidebar\'s behavior on mobile-sized screens.  ',
  },
  {
    name: 'Status Indicator',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/status-indicator.mdx',
    content:
      '      ## What makes up a status indicator? ////To effectively capture the user’s attention, status indicators are compromised of four different elements: - Colors - Icons - Shapes - Content To meet [WCAG 2.1 compliance](https://www.w3.org/WAI/WCAG21/quickref/#status-messages), at least three out of four elements must always be present. ### Colors ////The colors used for Status are found within the [HPE Design System Color guidance](https://design-system.hpe.design/foundation/color#status-colors). Additionally, always pair color with other elements as it is not widely accessible by everyone. These are some typical situations in which each color could be used:  - A critical status used to alert a device failure - A warning status used to notify the user of an expiring license - A normal status used to communicate that an update has successfully completed - An unknown status used to indicate that a page cannot be found ### Icons and Shapes ////Icons and shapes are used to represent the notification’s level of severity to users. Here is a set of icons and shapes created for Statuses found within the [HPE Design System Icons](https://design-system.hpe.design/foundation/icons) page: <StatusBox /> *** Remember that WCAG 2.1 guidelines states that at least three out of four elements must be present, therefore, this set will not pass accessibility requirements if it is not paired with another element such as well-written and relevant content.  ### Content ////**Do This:** - When constructing content be sure to use words, phrases, and concepts familiar to the user, rather than internal jargon.  - Content should be natural and logical as if it were being used within a real-world setting. **Don\'t Do This:** - Do not include overbearing or irrelevant information, especially important to note for low attention notifications. Try and keep status messages short and terse as to not overload the user with information. - Do not include run-on sentences. - Don\'t overuse the word "please".  While "please" is allowed, starting every action phrase with the word "please" is not appropriate.  In general, we should be limiting the use of "please". For more detailed guidelines and examples, be sure to check out the [HPE Design System Voice and Tone](https://design-system.hpe.design/foundation/voice-and-tone#case-study) page. ### Have more questions? ////Please be sure to send them over to the `#hpe-design-system` channel on [Slack](https://slack-invite.grommet.io/)! ',
  },
  {
    name: 'Table Customization',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/table-customization.mdx',
    content:
      '    ## Guidelines ////For complex tables with many columns, is it important for the user to be able to  configure which columns they want to see and the order in which these columns appear. This functionality is handled by a dropdown that contains two tabs: one for selecting which columns should appear in the table and another for ordering the columns. ## What makes up the customizable table? ////### An action to display column visibility and order controls. ////Place a button with an `Edit` icon next to the `Actions` menu for the table on the right side above the table. The `Actions` menu is mainly for actions which modify items in the table. Controls like the search and filter controls change what items are shown in the table or how they are presented rather than changing the items themselves. Since we want to customize the table itself, we have a separate controls for changing which columns are shown in the table and their order. ### Column visibility ////Clicking on the `Edit` button opens a dropdown which has two tabs. The first tab should be active and labeled "Select Columns". The tab content should consist of a Search input and a CheckBoxGroup that lists all possible table columns. When a column in the list is checked, it is visible in the table. When it is unchecked, it is removed from the table. Adjustments to the table data should occur immediately as the user checks or unchecks a column, as opposed to waiting until the dropdown closes. The user can also search for a specific column by typing in the Search input.  ### Column order ////The second tab of the dropdown should be labeled "Order Columns". It contains a list of the selected columns from the "Select Columns" tab. A user can reorder the columns either by dragging and dropping the column names in the list or by using the move up/move down buttons that are present next to each column name. Similar to column selection, the reordering of the table columns should take place immediately, as opposed to waiting until the dropdown closes. ',
  },
  {
    name: 'Toast Notifications',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/toast-notifications.mdx',
    content:
      '       ## Guidance ////Everything that you need to know about toasts and more. ### When should you use a Toast Notification? ////**Toasts should be considered when displaying these types of information to the user:** - Low attention messages that do not require user action - Singular status updates - Confirmations - Information that does not need to be followed up **Do not use Toasts if the information contains the following:** - High attention and crtitical information - Time-sensitive information - Requires user action or input - Batch updates Due to their limited use cases, toasts are advised to be used sparingly or even substituted entirely for a different type of notification. In no way are toasts mandatory elements for a platform’s notification system. ### Dealing with multiple Toast Notifications ////Because there are limited use cases for toast notifications, there should be little to no instances of multiple toasts being visible at the same time. However, if there are multiple toast notifications, you should deal with them by having only one toast present at a time. Once the first toast is dismissed or timed out, the next one should appear. ## Anatomy  ////<ToastDiagram /> Toasts are compromised of three main elements: 1. Status Indicator 2. Content (Title + Message) 3. Close button Aside from this, all toasts have a fixed width size at Medium (384px) while the height changes based off the amount of content.  ### Status Indicator ////Avoid using toasts for very critical information or alerts. Users may accidentally dismiss or entirely miss a toast, so it is best to avoid this case for important information. Additionally, avoid using toasts, critical or not, if it requires a user action.  The status indicators used for toasts are strictly for Normal, Warning, and Unknown statuses. <StatusBox toast /> You can read more guidance about [status indicators](/templates/status-indicator). ### Content (Title + Message) ////All toasts have content which is comprised of a title and a message. However, the content only requires a title, not necessarily a message. The title and message should be distinguishable from each other by the weight of the text. The status title and message should be distinguishable by the weight of the text. **1. Amount of Information** Toast notifications should not have too much information inside of them. Additionally, each notification should only revolve around one idea or subject. Because a toast notification is only present on the screen for a short amount of time, a user using assistive technology needs to have an understanding of what information is in the notification. Therefore, the content should be minimal and direct. For best practice, keep the amount of information to three lines or under. This three line limit either can be a combination of both the title and the message or a three-lined title. If the information is heavy and long, consider using a different type of notification other than toast. Never truncate text within a toast. The main point is to keep the information concise and clear. **2. Interactive Content** To remain compliant with WCAG 2.1 guidelines, avoid placing interactive elements, like links and buttons, inside of a toast. These elements may be difficult to access with a screen reader and other assistive technology, so it is best to avoid complex toasts. ### Close Button ////The close button within a toast should be the only interactable element and is used to dismiss the notification. To clarify, the toast itself is not dismissable on click rather only when the close button is specifically activated. This is to avoid any confusion the user may have on what the interactable elements are within a toast. ## Accessibility  ////Toast notifications should be read aloud when they appear on a user\'s screen. To accomplish this, toasts are given the role of "log" with default aria-live set to "polite". The "log" role is used for live regions where new information is presented to a user in a meaningful order, and the "polite" attribute allows for a non-obtrusive way to notify screen readers of a new toast in a timely manner.  ## Placement  ////Make sure to follow these guidelines for Toast Notifications: - Place them either top-center or top-right of the screen. If badging is being used, toasts should be placed underneath it. Note that top-right placements may negatively affect those using screen magnifiers. - Fade in on arrival and fade out when dismissed. - Do not obscure critical information and any primary action elements. - Toasts are not focused on and do not appear when a user is within a Modal or Wizard since they do not carry high attention information.  - Reminder that toasts should not be used to convey a batch of information as this would quickly hinder their visibility and cause notification fatigue. - Consider incorporating a Notification Center where a user can access all toast notifications at once. ## Persistence ////Toasts are automatically dismissed after 8 seconds. Because they contain low severity level information, they should not require user action other than the close button. Keep in mind of the three line limit for toasts since longer messages may not be read completely by screen readers before automatically dismissing. ### Have more questions? ////Please be sure to send them over to the `#hpe-design-system` channel on [Slack](https://slack-invite.grommet.io/)! ',
  },
  {
    name: 'Wizard',
    parent: 'templates',
    path:
      '/Users/mglissmann/Code/aries/aries-site/src/pages/templates/wizard.mdx',
    content:
      '   ## Guidance ////Use a wizard when your form involves multiple steps. This makes the experience more manageable for the user and helps to eliminate error by validating inputs as the user progresses. A wizard should always appear as a fullscreen modal. ### Header and Footer behavior ////The Wizard header should always be sticky so that user has persistent access to previous step and cancel actions. The footer, when there is sufficient height on desktop, should be placed directly below the inputs. On mobile, or when there is not sufficient height to show all inputs, the footer should be sticky on the bottom of the window. ### Providing guidance for a form step ////It is helpful to provide concise and clear descriptions for each step of the form. Keep each step simple and in chunks easy enough to fit on a single page. This helps the user have confidence in how to fill out the form correctly. ### Indicating progress ////It is important to give the user an indication of where they are within the form. This should be done by indicating the total number of steps and the user\'s current position (i.e. "Step 1 of 3"). ### Validation ////Validation should occur within each step of the wizard. If there are any errors with the inputs in the current step, the user should not be able to advance and errors should be displayed. Error display should follow conventions established by [Form](/templates/forms). ### Summarizing what was accomplished or configured ////The final step of a wizard should summarize what has been accomplished or configured. This summary is displayed to the user prior to form submisson. In order to complete the wizard, the user will click a submit button provided on this screen. Examples of submit button labels include "Finish Setup", "Finish Configuration", etc. ### Cancellation ////It is important to provide the user with an option to "Cancel" or leave the wizard. Place this button on the upper right hand corner of the wizard. When clicked, the "Cancel" button should: - Open a layer that allows the user to confirm they want to cancel. - Provide two buttons: the primary button confirming cancellation (i.e. "Yes, cancel setup") and a secondary button allowing them to return back to completing the wizard (i.e. "No, continue setup"). ### Single Column vs Two Column Wizards ////If guidance can be provided in a short description, use a single column wizard. When additional guidance is required for the form or content of the wizard, you might consider a two-column format. **If using a single column format:** - Center the "Next" or submit button directly under the form inputs. **If using a two column format:** - Wrap guidance in a containing box with different background color than the page, so that it is visually separate from form inputs. - Center the "Next" or submit button underneath both the form inputs and the guidance. - On desktop, place the guidance to the right of form inputs. - On mobile, place the guidance above form inputs. ## Variants ////Common wizard variants. ### Two-column Wizard ////When additional guidance is necessary, use a two-column wizard. Click "See Fullscreen" for a more realistic experience.  ',
  },
  {
    name: 'Whats New',
    parent: 'pages',
    path: '/Users/mglissmann/Code/aries/aries-site/src/pages/whats-new.mdx',
    content:
      '     <!-- NOTES for content editors modifying this file   - See [editing markdown instructions](https://github.com/grommet/hpe-design-system/blob/master/aries-site/README.md#editing-whats-new-page).   - Helpful markdown syntax reminders with this [markdown cheatsheet](https://www.markdownguide.org/basic-syntax/).   - Reference the "New Entry Template" provided below for the markdown used to      create new "What\'s New" entries. --> <ThemeContext.Extend value={whatsNew}> # What\'s New ////Track Design System announcements, new template patterns, guidance, and released components. Our [roadmap](https://roadmap.grommet.io/hpe-design-system-roadmap-mike-walrath-hpe-com) provides  an idea for what is on the horizon. Our [backlog](https://github.com/orgs/grommet/projects/10)  provides greater detail about what is being worked on. Please share any feedback you may have  regarding either via [Slack](https://hpe.slack.com/archives/C04LMJWQT). <!-- BEGIN: New Entry Template -- Markdown syntax and layout for creating new entries ## Week of entry in Month Days, Year format ////### Feature 1 ////- Item 1 - Item 2 - ... - Item n ### Feature 2 ////- Item 1 - ... - Item n ... ### Feature n ////- Item 1 - ... - Item n --><!-- END: New Entry Template --> <!-- BEGIN: What\'s New Entries --> ## September 20 - October 1, 2021 - Kicked off the HPE Design System Council, a steering committee for defining key initiatives and priorities. - Began holding Design System "office hours" each Wednesday morning. Bring your questions and topics for discussion. Contact the #hpe-design-system channel on Slack to request a calendar invite. - New resources and a checklist has been added to the [Accessibility page](/foundation/accessibility#external-resources). - Fixed height on [Table](/components/table) examples when in full screen. - Completed [Button size designs](https://www.figma.com/file/Oi5UEEQ33VCAyOKQcZ8Nr8/HPE-Button-Component?node-id=0%3A1). - Completed ideation and collected feedback for [NameValueList designs](https://www.figma.com/file/Ny7rYK5gI5VO4PtZsq6vGC/HPE-Name-Value-Pair?node-id=148%3A1936). - Provides "request for comments" pull requests for Grommet NameValueList component. [Approach 1](https://github.com/grommet/grommet/pull/5623). [Approach 2](https://github.com/grommet/grommet/pull/5626). - Improved DateInput and Calendar keyboard accessibility behavior. - Provided [additional accessibility resources](https://design-system.hpe.design/foundation/accessibility#internal-resources) from the Product Accessibility Office on the Accessibility page. - Implemented improved site search capabilities on the HPE Design System site. - Completed categorization and naming for Navigation patterns. - Released [Grommet v2.18.0](https://github.com/grommet/grommet/releases/tag/v2.18.0). ## September 6 - September 17, 2021 - Completed research on [task focused navigation](https://www.figma.com/file/b6hiokanRCwNnc93PpHdgQ/HPE-Design-System-Navigation?node-id=1265%3A1187). - Completed usability testing on toggle buttons and sortable columns within a table with an expert screen reader user. - [Ideation on Navigation](https://www.figma.com/file/b6hiokanRCwNnc93PpHdgQ/HPE-Design-System-Navigation?node-id=1279%3A1206) coming to a finish. - Added guidance for [toggle icon buttons](/components/button#toggle-buttons-with-icons). - Added t-shirt sizing for buttons. Figma publishing coming soon! - Enhanced List to support top-alignment and added guidance for [multi-line lists](/templates/lists). - Enhanced a11yText on our light/dark mode button within the HPE Design System [header navigation](/). - Aligned [Toolbar Button hover](/components/button#toolbar-button) implementation with [Figma](https://www.figma.com/file/Oi5UEEQ33VCAyOKQcZ8Nr8/HPE-Button-Component?node-id=681%3A5164). - Aligned RangeInput component to Grommet. Figma file coming soon! - Advanced Design System site search capabilities. Work in progress. ## August 30 - September 3, 2021 - Published [Notifications page](/components/notification). - Published [Toast Notifications](/templates/toast-notifications). - Published [Status Indicators](https://design-system.hpe.design/templates/status-indicator) template page. - Updated all examples referencing "status" to apply the new [Status Indicators guidance](/templates/status-indicator#what-makes-up-a-status-indicator). ## August 23 - August 27, 2021  - Published the [Notification](/components/notification) and [Toast Notifications](/templates/toast-notifications) & [Status Indicator](/templates/status-indicator) content with examples.  - Updated [Toolbar Button](https://www.figma.com/file/Oi5UEEQ33VCAyOKQcZ8Nr8/HPE-Button-Component?node-id=3156%3A5073) to include an icon-only variant and changed stroke from 2px to 1px. - Updated [Default Button](https://www.figma.com/file/Oi5UEEQ33VCAyOKQcZ8Nr8/HPE-Button-Component?node-id=690%3A823) in Figma to align with the Design System site by removing the background color. - Updated name for "Tooltip" component in Figma library to ["Tip"](https://www.figma.com/file/Jd34cI5yyZIPb5BIwkIPU2/HPE-Tip?node-id=538%3A803) to align with the Design System site.  - Added [numerical values](https://www.figma.com/file/BqCjvjc0rECQ4Ln2QhyjNi/HPE-Range-Input-Component?node-id=9%3A73) labeling each end of RangeInput. - The [actions menu](https://www.figma.com/file/TonE8uQ33e5QJRPknZx36q/Ordering-Of-Items?node-id=868%3A16581) is now styled to match the new Toolbar Button. ## July 19-23, 2021 - Iterated on Notifications taxonomy based on research results. - Continued [ideating on written guidance for Navigation](https://www.figma.com/file/b6hiokanRCwNnc93PpHdgQ/HPE-Design-System-Navigation?node-id=1%3A20). - Audited all of Figma files to ensure correct use of MetricHPEXS font. ## July 12-16, 2021 ////- Began Notifications Taxonomy Survey. - Updated [Header colors on DateInput component in Figma](https://www.figma.com/file/Mf9if6zyGETTWW5b9PsYNQ/HPE-Date-Input-Component?node-id=0%3A1). - Removed [Selected state from Menu on Figma file](https://www.figma.com/file/DyFWlzLBUtK5KH5jJhwoCB/HPE-Menu-Component?node-id=0%3A1) to align with Design System site. - Updated [DataTable with Search value](https://www.figma.com/file/XEoIWIlLfcARRIFhkpFCch/HPE-Table?node-id=2390%3A242) to match Filtering examples on Figma and Design System site. - [Updated Select dropdown items on Figma file to use regular text weight rather than form value weight](https://www.figma.com/file/fZJdRcNrvZ1JjdPRYHpFFU/HPE-Select-Component?node-id=0%3A1). - [Updated TextInput dropdown items on Figma file to use regular text weight rather than form value weight](https://www.figma.com/file/E40Oo2MpdRNMyVaJqfJ0Wd/HPE-Text-Input-Component?node-id=0%3A1). - Enhanced the way Menu is built on Figma by making it [one component rather than a button with a list drop.](https://www.figma.com/file/DyFWlzLBUtK5KH5jJhwoCB/HPE-Menu-Component?node-id=0%3A1). - Updated Wizard Figma file to match the Design System site. [Changes include: wizard header background color, spacing and text styling](https://www.figma.com/file/GEhgYzx3b8MejBjg9gAxyA/Wizarding?node-id=0%3A1) ## July 5-9, 2021 ////- Began ideation for Navigation guidance and examples. - Added guidance on [how to determine the width of columns on a Table](https://design-system.hpe.design/components/table#setting-the-width-of-the-table). ## June 28 - July 2, 2021 ////- Added [new Toolbar Button to Figma and its variants] ( https://www.figma.com/file/Oi5UEEQ33VCAyOKQcZ8Nr8/HPE-Button-Component?node-id=0%3A1). - Updated [Form Figma file to include correct text styling.](https://www.figma.com/file/3fkwBelW5UsCbfwdDCJkT8/HPE-Form-Templates?node-id=2668%3A3582) TextInput values were changed from text-strong to default text color. - Completed r{esearch for Navigation}(https://www.figma.com/file/b6hiokanRCwNnc93PpHdgQ/HPE-Design-System-Navigation?node-id=1%3A18). ## June 21-25, 2021 ////- Began research explorations for Navigation. ## July 26-30, 2021 ////- Updated Form examples on Design System site [to use semantically correct headings and font color](/templates/forms). ## August 23-27, 2021 - Added examples to Tip to display the different sizes and how it can be used within a Table. ## June 14-18, 2021 ////- Released grommet-icons v4.6.0! Check out the [Release Notes](https://github.com/grommet/grommet-icons/releases/tag/v4.6.0). - Added [download links for MetricHPEXS](/foundation/typography#fonts-for-offline-usage) for offline usage. - Enhanced filtering examples to demonstrate [Filtering with a table containing selectable rows](/templates/filtering#filtering-with-selectable-results). - Added guidance for [setting the width of a table](/components/table#setting-the-width-of-the-table). - Added a [CheckBox variant of "checked" to Figma for Table headers]( https://www.figma.com/file/XEoIWIlLfcARRIFhkpFCch/HPE-Table?node-id=2390%3A13994). - Aligned the [CheckBox component in Figma](https://www.figma.com/file/7Mm1xDBTOtPHqggEVpaD2N/HPE-Checkbox-Component?node-id=1315%3A1) with the Design System site to include a border on hover. ## June 7-11, 2021 ////- Released Grommet v2.17.3! Read the [Release Notes](https://github.com/grommet/grommet/releases/tag/v2.17.3). - [Updated Wizard "Next" button mobile layout](/templates/wizard) to match desktop layout - Added examples for how the **order of items** may be customized in a [Table](/templates/table-customization) and [List](/templates/lists#item-order). - Provided instructions and guidance for [implementing the latest HPE Global Header](/templates/global-header). ## May 31 - June 4, 2021 ////- Added guiance and examples for [FileInput](/components/fileinput) - Added `kind="toolbar"` to button in grommet-theme-hpe for use in Filter contexts. See how this button is used in [Filtering examples](/templates/filtering). - Updated filtering pattern to use default Button instead of Anchor for "Clear Filters" control. View the [Filtering examples on Design System site](https://design-system.hpe.design/templates/filtering) and [Figma](https://www.figma.com/file/EA0OZFdocKVcQ55c7Jainb/HPE-Filter-Templates?node-id=1%3A3738). ## May 24-28, 2021 ////- Began a "Getting Started with HPE Design System" starter application providing a step-by-step introduction to Grommet, grommet-theme-hpe, and developing with the Design System. Check out the repository: https://github.com/grommet/hpe-design-system-starter. ## May 17-21, 2021 ////- Added guidance for [Spinner](/components/spinner) - Improved accessibility for Select by [allowing callers to specify an `a11yTitle`](https://github.com/grommet/grommet/pull/5234). - Improved the Design System site experience for keyboard navigators and screen reader users by [adding SkipLinks](https://github.com/grommet/hpe-design-system/pull/1606).  - Completed gathering research and screen shots of the different types of [Page Layouts](https://www.figma.com/file/4rdBkUlHd5MCVq3hvUOXHd/App-Page-Layouts?node-id=881%3A3952). - Completed [Page Layout](https://www.figma.com/file/4rdBkUlHd5MCVq3hvUOXHd/App-Page-Layouts?node-id=0%3A1) designs in Figma. ## May 10-14, 2021 ////- Released grommet-theme-hpe v2.1.0! Read the [Release Notes](https://github.com/grommet/grommet-theme-hpe/releases/tag/v2.1.0). - Created slides on why [Principles](https://www.figma.com/file/8jLGXR0nBgFeuy9cdQUxWH/Principles-and-Values?node-id=146%3A1) are important for a Design System. ## May 3-7, 2021 ////- Improved accessibility of grouped form inputs in Grommet: https://github.com/grommet/grommet/pull/5209 ## April 26-30, 2021 ////- Released Grommet v2.17.2! Read the [Release Notes](https://github.com/grommet/grommet/releases/tag/v2.17.2). - Provided example of [CheckBox validation when not contained in a FormField](https://github.com/grommet/hpe-design-system/issues/1592). - Enhanced grommet-theme-hpe z-index for Layer and Drop to work with HPE Global Header: https://github.com/grommet/grommet-theme-hpe/pull/185 ## April 19-23, 2021 ////- Added [examples of text sizes 3xl, 4xl, 5xl, 6xl](/foundation/typography#text) - Added [text sizes of 3xl, 4xl, 5xl, and 6xl to Figma](https://www.figma.com/file/oJhw3JqMemtbwWjlLPWW5O/HPE-Typography-Styles?node-id=149%3A2). - Updated [Form examples](/templates/forms#shipping): when referring to ZIP codes, the acronym should always be written as ZIP instead of Zip - Added guidance for [CheckBox as a toggle](https://design-system.hpe.design/components/checkbox#toggle). - Updated Figma to provide an example for a [RadioButtonGroup without a FormField description](https://www.figma.com/file/aZyY606ENQedz4FXugdzgS/HPE-Radio-Button-Group-Component?node-id=105%3A643). - Completed design ideations for [Ordering of Items](https://www.figma.com/file/TonE8uQ33e5QJRPknZx36q/Ordering-Of-Items?node-id=343%3A6850) ## April 12-16, 2021 ////- Added guidance and examples for [Tip](/components/tip) ## April 5-9, 2021 ////- Updated [Wizard guidance](/templates/wizard) and patterns to demonstrate recommended behavior for width of the inputs and footer - Demonstrated [how to use `plain: true` in DataTable columns](/components/table#selecting-multiple-records-and-batch-actions) to create clickable cells ## March 29 - April 2, 2021 ////- Updated guidance for [user-entered input in Forms](/templates/forms#user-entered-input). - Updated guidance for [considerations to make dashboards easier to consume](/templates/dashboards#guidance). - Added guidance and an example for [navigation from within a Table](/components/table#navigation-via-table). ## March 22-26, 2021 ////- Added theming for [Pagination](https://github.com/grommet/grommet-theme-hpe/pull/174) and [Spinner](https://github.com/grommet/grommet-theme-hpe/pull/176) to grommet-theme-hpe - Completed ideation on [FileInput](https://www.figma.com/file/8HwAiiSDloOTjUxqvCTypq/HPE-FileInput-Component?node-id=0%3A1). ## March 15-19, 2021 - Added a [RadioButton Group with no description variant to Figma](https://www.figma.com/file/aZyY606ENQedz4FXugdzgS/HPE-Radio-Button-Group-Component?node-id=78%3A0). ### Published Pagination page and Figma designs ////- Added guidance and usage examples for when to use [pagination](https://design-system.hpe.design/components/pagination). - Published [Figma designs for Pagination](https://www.figma.com/file/slRqNvhJub0QlgN46zSXoY/HPE-Pagination-Component?node-id=1%3A2) ### Published Spinner page ////- Spinner Page was added onto the site. Read more about [spinner guidance](https://design-system.hpe.design/components/spinner) ## March 8-9, 2021 ////### Conducted a design-sprint to discuss Page-Layouts  ////## March 1-5, 2021 ////### Ran OWASP security scan on the design-system site ////- The OWASP Security Scan was run to identify any security vulnerabilities in the Design System site. This is required to ensure full compliance with HPE standards. ## Febuary 22-26, 2021 ////### New Spinner Component on Grommet. ////The new Spinner component has been released on grommet stable [branch](https://github.com/grommet/grommet/pull/4981). ### Add new validation colors ////- Add validation-ok and validation-warning to theme. ### Added Tooltip to theme and site examples ////- Default Tip styling available on grommet-theme-hpe stable [branch](https://github.com/grommet/grommet-theme-hpe/pull/167) - Guidance and code examples available on the [Tooltip page](https://design-system.hpe.design/components/tooltip) ## Febuary 15-19, 2021 ////### New FileInput Component - Check out the new [FileInput](https://v2.grommet.io/fileinput) Component on the grommet stable branch. ### New Pagination Component  - Check out the new [Pagination Component](https://v2.grommet.io/pagination) on the grommet stable branch. ### Layer  ////- Aligned [layer component](https://github.com/grommet/hpe-design-system/pull/1434) to match the figma files.  ## Febuary 8-12, 2021 - [Ordering of Items research](https://www.figma.com/file/TonE8uQ33e5QJRPknZx36q/Ordering-Of-Items?node-id=33%3A12) was completed. ### Homepage  ////- Completed a fresh new look for our new HPE Design System [home page](https://github.com/grommet/hpe-design-system/pull/1408). - [Figma](https://www.figma.com/file/CWB0xMmfVx6cT0ugzluySl/home-page?node-id=87%3A379) is updated as well  ### Updated Wizard template  ////- Adds Wizard Title to WizardContext. Allows for step header description to be custom element ## Febuary 1-5, 2021 ////- Updated [Search Figma file to include drop suggestion examples](https://www.figma.com/file/KKHWJN4GAI0Mq5yh0snDT6/HPE-Search-Component?node-id=43%3A26) to align with Design System site. - Updated [TextInput Figma file to include drop suggestion examples](https://www.figma.com/file/E40Oo2MpdRNMyVaJqfJ0Wd/HPE-Text-Input-Component?node-id=2231%3A145) to align with Design System site. ### Provided some content on our accessibility page.  ////- Find out how to incorporate accessibility into design and development. Check out the [page](https://design-system.hpe.design/foundation/accessibility) ###  Updated multiiselect example  ////- Previously multiiselect was immediately closing after a user made a single selection this changed to add a close prop. Find details about this change [here](https://github.com/grommet/hpe-design-system/pull/1400) ### Grommet 2.16.3 release ////### Update theme to handle formfield labels with required ////- Updated the HPE theme to provide required label. ## January 24-30, 2021 ////### Background colors ////- Audited Design System site examples and [updated background color usage](https://github.com/grommet/hpe-design-system/pull/1384)  aligning with [background colors guidance](/foundation/background-colors-guidance). ### Button ////- Enhanced ability to [support button sizes](https://github.com/grommet/grommet/pull/4886)  in the HPE theme.  - Next steps are to incorporate button sizes into the HPE theme. ### Cards ////- Modified [default elevation](https://github.com/grommet/grommet-theme-hpe/pull/157) applied to Cards. ### DateInput ////- [Added example](https://www.figma.com/file/Mf9if6zyGETTWW5b9PsYNQ/HPE-Date-Input-Component?node-id=287%3A910)  of a DateInput without a label to Figma.  ### Headings ////- Headings now use `text-strong` by default in the HPE Theme. [Completes work](/whats-new#headings-1162021)  begun week ending January 16. ### Form ////- Resolved issue related to [updating form input values](https://github.com/grommet/grommet/issues/4882)  when name prop not present. Contribution from the Grommet community! - Fixed issue regarding [onBlur form validation](https://github.com/grommet/grommet/issues/4863). ### Layer ////- Implement [Layer border-radii in HPE Theme](https://github.com/grommet/hpe-design-system/issues/1341)  to match Figma designs. [Completes Layer theming work](#miscellaneous-12192020) begun in December. ### Table ////- Resolved [column alignment bug](https://github.com/grommet/grommet/issues/4887).  Contribution from the Grommet community! - Resolved lag in hover styling https://github.com/grommet/grommet/issues/4881. ### Tabs ////- Resolved [spacing issue between icons within Tabs in Figma](https://www.figma.com/file/Kp4dWyhUTnKIJ1Cg5CoL9o/HPE-Tabs-Component?node-id=0%3A1). ### Wizard ////- Incorporated [updated Wizard designs](https://design-system.hpe.design/templates/wizard) based on feedback. Notable changes include:  - Wizard header now has a background of `background-contrast`.  - Step titles are now using h1, size="small".  - Tightened up spacing between step number, step title, and step description. ### Miscellaneous ////- Cleaned up [Figma component thumbnails](https://github.com/grommet/hpe-design-system/issues/1356). - Provided [proof of concept for custom Select](https://github.com/grommet/grommet/issues/4855) implementation meeting requirement use case. ## January 17-23, 2021 ////### Background colors ////- Incorporated feedback and addressed clarifying questions:   - Provided additional guidance on what to consider when [selecting a basic or layered approach](https://design-system.hpe.design/foundation/background-colors-guidance#basic-or-layered-approach).   - Added an example and guidance for using the [basic layout with cards](https://design-system.hpe.design/foundation/background-colors-guidance#basic-layout-with-cards).   - Added examples clarifying how an application header should appear and behave when it is a [fixed header](https://design-system.hpe.design/foundation/background-colors-guidance#with-fixed-header) and another for when the [header scrolls with the content](https://design-system.hpe.design/foundation/background-colors-guidance#header-scrolls-with-content).   ### DateInput ////- Added a [DateInput with no label to Figma](https://www.figma.com/file/Mf9if6zyGETTWW5b9PsYNQ/HPE-Date-Input-Component?node-id=1%3A567) to align with Design System site.   ### InfiniteScroll ////- Completed [InfiniteScroll design direction](https://www.figma.com/file/XOEwUOqtfLAowprV2psWHM/HPE-Infinite-Scroll?node-id=1%3A35).    ### Pagination ////- Advanced the work-in-progress by incorporating review feedback and t-shirt sizing. [Play with Pagination behavior](https://deploy-preview-4646--sad-tereshkova-173d07.netlify.app/?path=/story/controls-pagination--custom)  and/or [follow the pull request progress](https://github.com/grommet/grommet/pull/4646). ### ToolTip ////- Completed ideation phase and finalized [design direction for ToolTip](https://www.figma.com/file/Jd34cI5yyZIPb5BIwkIPU2/HPE-Tooltip?node-id=119%3A375).  A special thanks to **@Maggie Silva** for her contributions to ToolTip. ### Miscellaneous ////- Completed ideation for a [refreshed home page](https://www.figma.com/file/CWB0xMmfVx6cT0ugzluySl/home-page?node-id=0%3A1) experience. The live version is coming soon. - Published the [What\'s New page](https://design-system.hpe.design/whats-new). ## January 10-16, 2021 ////### Headings - 1.16.2021 ////- Headings in the Figma library have been updated to use `text-strong`. - TODO: Apply `text-strong` as default in HPE Theme. ### Background colors ////- Published a new page providing guidance for  [how to apply background colors](https://design-system.hpe.design/foundation/background-colors-guidance)  in your application layout. We\'ve already received great feedback and identified areas which need  to be addressed. ### Anchor ////- Added an example for an [Anchor with weight](/components/anchor#anchor-with-weight) to the Anchor page. ### Pagination ////- Added custom theming capabilities for the proposed Pagination Grommet component. [Play with Pagination behavior](https://deploy-preview-4646--sad-tereshkova-173d07.netlify.app/?path=/story/controls-pagination--custom)  and/or [follow the pull request progress](https://github.com/grommet/grommet/pull/4646). ### Miscellaneous ////- Began implementation of the "What\'s New" page. - Fixed error preventing Grommet Docs site to deploy properly. ## January 3-9, 2021 ////### Headings ////- Decision has been made to make `text-strong` <ColorSwatch background="text-strong" /> the  default font color for Headings. Previously, Headings defaulted to color `text`  <ColorSwatch background="text" />. ### Pagination ////- Made pagination controls respect a uniform width for the proposed Pagination Grommet component. - Added abillity to control the sizing of pagination controls via "t-shirt sizing." - Explored approaches for allowing custom theming capabilities. - [Play with Pagination behavior](https://deploy-preview-4646--sad-tereshkova-173d07.netlify.app/?path=/story/controls-pagination--custom)  and/or [follow the pull request progress](https://github.com/grommet/grommet/pull/4646). ### Searching & Filtering ////- Additional guidance was requested for how the text should read in a situation after  a user has filtered a set of table results and selected rows from the filtered table.  That work is represented in [this issue](https://github.com/grommet/hpe-design-system/issues/1343). ### Miscellaneous ////- [Fixed order of plot points](https://github.com/grommet/grommet/issues/4854) in Chart. - Enhanced Layer to allow elevation to be [controlled via theme](https://github.com/grommet/grommet/pull/4851),  and [set default elevation](https://github.com/grommet/grommet-theme-hpe/pull/150) of \'large\' in HPE Theme. - Made casing of form validation errors consistent across [Form examples](https://design-system.hpe.design/templates/forms). ## December 20, 2020 - January 2, 2021 ////Happy holidays to all. See you in 2021! ## December 13-19, 2020 ////### Colors ////- Added background context and criteria for how the ["green" colors in the HPE Theme](https://design-system.hpe.design/foundation/color#green-color-accessibility) were determined. ### Miscellaneous - 12.19.2020 ////- Fixed issue [formatting disabled Calendar dates](https://github.com/grommet/hpe-design-system/issues/1328). - Fixed issue with [Select with search](https://github.com/grommet/grommet/issues/4829) - Enhance Layer theming to [allow styling border radii](https://github.com/grommet/grommet/issues/4805). - Completed [Ideation phase for What\'s New page](https://github.com/grommet/hpe-design-system/issues/822) with recommended design for implementation. - Completed research on [Principles and Values](https://www.figma.com/file/8jLGXR0nBgFeuy9cdQUxWH/Principles-and-Values?node-id=0%3A1) to enhancements to our own. ## December 6-12, 2020 ////### Tables ////- Hover effect on tables has been fixed. [Check it out!]() - Table now has guidance on using [unique identifiers](https://www.figma.com/file/XEoIWIlLfcARRIFhkpFCch/HPE-Table?node-id=2390%3A13974) in your table. - Table also has guidance for how [interactive table cells](https://www.figma.com/file/XEoIWIlLfcARRIFhkpFCch/HPE-Table?node-id=2390%3A13974) look and behave. ### Select ////- Validation icon added to Select component within Figma. [Check it out!]() ### Icons ////- Work to provide guidance for how and when to use icons in your designs has  begun. We are in the **Exploration** phase of this work where we gather research,  assemble use cases, etc. Check back soon. ### Miscellaneous ////- Aligned of Wizard examples in Figma and Design System site. <!-- END: What\'s New Entries --> </ThemeContext.Extend> ',
  },
];
